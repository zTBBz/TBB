<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RogueLibsCore</name>
    </assembly>
    <members>
        <member name="T:RogueLibsCore.DefaultInventoryChecks">
            <summary>
              <para>The collection of default inventory checks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.GhostCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents ghost agents from using items.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.PeaBrainedCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Pea-Brained" agents from using non-Food items.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyOilCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Oil-Reliant" agents from consuming food.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyOilMedicineCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Oil-Reliant" agents from using medicine.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyBloodCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Jugularious" agents from consuming food.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyBloodMedicineCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Jugularious" agents from using medicine.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyChargeCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Electronic" agents from consuming food.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyChargeMedicineCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Electronic" agents from using medicine.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.OnlyHumanFleshCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents "Strict Cannibal" agents from consuming non-alcohol food.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="M:RogueLibsCore.DefaultInventoryChecks.FullHealthCheck(RogueLibsCore.OnItemUsingArgs)">
            <summary>
              <para>Prevents agents with full health from consuming healing items.</para>
            </summary>
            <param name="e">The item usage event args.</param>
        </member>
        <member name="T:RogueLibsCore.HookExtensions">
            <summary>
              <para>The collection of hook extensions.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook(InvItem,RogueLibsCore.IHook{InvItem})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to attach to the <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> or <paramref name="hook"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook(Agent,RogueLibsCore.IHook{Agent})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to attach to the <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> or <paramref name="hook"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook(ObjectReal,RogueLibsCore.IHook{ObjectReal})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to attach to the <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> or <paramref name="hook"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook(StatusEffect,RogueLibsCore.IHook{StatusEffect})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to attach to the <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> or <paramref name="hook"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook(Trait,RogueLibsCore.IHook{Trait})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to attach to the <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> or <paramref name="hook"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook``1(InvItem)">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type and attaches it to the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The created hook.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook``1(Agent)">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type and attaches it to the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The created hook.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook``1(ObjectReal)">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type and attaches it to the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The created hook.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook``1(StatusEffect)">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type and attaches it to the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The created hook.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.AddHook``1(Trait)">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type and attaches it to the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The created hook.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook(InvItem,RogueLibsCore.IHook{InvItem})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to detach from the <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook(Agent,RogueLibsCore.IHook{Agent})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to detach from the <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook(ObjectReal,RogueLibsCore.IHook{ObjectReal})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to detach from the <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook(StatusEffect,RogueLibsCore.IHook{StatusEffect})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to detach from the <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook(Trait,RogueLibsCore.IHook{Trait})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <param name="hook">The hook to detach from the <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook``1(InvItem)">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of a hook to detach from the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns><see langword="true"/>, if a hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook``1(Agent)">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of a hook to detach from the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns><see langword="true"/>, if a hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook``1(ObjectReal)">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of a hook to detach from the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns><see langword="true"/>, if a hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook``1(StatusEffect)">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of a hook to detach from the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns><see langword="true"/>, if a hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.RemoveHook``1(Trait)">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current <paramref name="instance"/>.</para>
            </summary>
            <typeparam name="THook">The type of a hook to detach from the <paramref name="instance"/>.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns><see langword="true"/>, if a hook was successfully detached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(InvItem)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(Agent)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(ObjectReal)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(StatusEffect)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(Trait)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook(Unlock)">
            <summary>
              <para>Returns the <see cref="T:RogueLibsCore.UnlockWrapper"/> attached to the current <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The attached <see cref="T:RogueLibsCore.UnlockWrapper"/> hook, if found; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHook``1(Unlock)">
            <summary>
              <para>Returns a hook attached to the current <paramref name="instance"/>, that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of a hook to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>The hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHooks``1(InvItem)">
            <summary>
              <para>Returns an enumerable collection of all hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>An enumerable collection of hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHooks``1(Agent)">
            <summary>
              <para>Returns an enumerable collection of all hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>An enumerable collection of hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHooks``1(ObjectReal)">
            <summary>
              <para>Returns an enumerable collection of all hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>An enumerable collection of hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHooks``1(StatusEffect)">
            <summary>
              <para>Returns an enumerable collection of all hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>An enumerable collection of hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetHooks``1(Trait)">
            <summary>
              <para>Returns an enumerable collection of all hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <param name="instance">The instance of a hookable type.</param>
            <returns>An enumerable collection of hooks attached to the current <paramref name="instance"/>, that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetStatusEffects(StatusEffect)">
            <summary>
              <para>Returns the <see cref="T:StatusEffects"/> instance containing the current <paramref name="statusEffect"/>.</para>
            </summary>
            <param name="statusEffect">The current instance of <see cref="T:StatusEffect"/>.</param>
            <returns>The <see cref="T:StatusEffects"/> instance containing the current <paramref name="statusEffect"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="statusEffect"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.HookExtensions.GetStatusEffects(Trait)">
            <summary>
              <para>Returns the <see cref="T:StatusEffects"/> instance containing the current <paramref name="trait"/>.</para>
            </summary>
            <param name="trait">The current instance of <see cref="T:Trait"/>.</param>
            <returns>The <see cref="T:StatusEffects"/> instance containing the current <paramref name="trait"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trait"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.CustomAbility">
            <summary>
              <para>Represents a custom ability.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomAbility.SetupDetails">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomAbility.OnAdded">
            <summary>
              <para>The method that is called when the special ability is added.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomAbility.OnPressed">
            <summary>
              <para>The method that is called when the special ability is pressed.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomAbility.CurrentTarget">
            <summary>
              <para>Gets the last <see cref="T:PlayfieldObject"/> returned by the <see cref="M:RogueLibsCore.IAbilityTargetable.FindTarget"/> method.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IAbilityChargeable">
            <summary>
              <para>Indicates that a custom ability is chargeable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IAbilityChargeable.OnHeld(RogueLibsCore.OnAbilityHeldArgs)">
            <summary>
              <para>The method that is called each frame when the special ability is held.</para>
            </summary>
            <param name="e">The custom ability's holding data.</param>
        </member>
        <member name="M:RogueLibsCore.IAbilityChargeable.OnReleased(RogueLibsCore.OnAbilityReleasedArgs)">
            <summary>
              <para>The method that is called when the special ability is released.</para>
            </summary>
            <param name="e">The custom ability's release data.</param>
        </member>
        <member name="T:RogueLibsCore.OnAbilityHeldArgs">
            <summary>
              <para>Represents the custom ability's holding args.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnAbilityHeldArgs.HeldTime">
            <summary>
              <para>Gets or sets the current holding time, in seconds.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnAbilityHeldArgs.Interrupt">
            <summary>
              <para>Interrupts the custom ability's holding.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.OnAbilityReleasedArgs">
            <summary>
              <para>Represents the custom ability's released args.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnAbilityReleasedArgs.#ctor(System.Single)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.OnAbilityReleasedArgs"/> class with the specified <paramref name="heldTime"/>.</para>
            </summary>
            <param name="heldTime">The custom ability's held time.</param>
        </member>
        <member name="P:RogueLibsCore.OnAbilityReleasedArgs.HeldTime">
            <summary>
              <para>Gets the last holding time, in seconds.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IAbilityRechargeable">
            <summary>
              <para>Indicates that a custom ability is rechargeable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IAbilityRechargeable.OnRecharge(RogueLibsCore.OnAbilityRechargingArgs)">
            <summary>
              <para>The method that is called as a part of the special ability's recharging coroutine.</para>
            </summary>
            <param name="e">The custom ability's recharging data.</param>
        </member>
        <member name="T:RogueLibsCore.OnAbilityRechargingArgs">
            <summary>
              <para>Represents the custom ability's recharging args.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnAbilityRechargingArgs.UpdateDelay">
            <summary>
              <para>Gets or sets the recharging coroutine's update delay, in seconds.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnAbilityRechargingArgs.ShowRechargedText">
            <summary>
              <para>Gets or sets whether to display the Recharged text, when the custom ability is recharged.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IAbilityTargetable">
            <summary>
              <para>Indicates that a custom ability is targetable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IAbilityTargetable.FindTarget">
            <summary>
              <para>The method that is called to determine what the special ability owner can use the ability on.</para>
            </summary>
            <returns>The target object, if the special ability can be used; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.CustomEffect">
            <summary>
              <para>Represents a custom status effect.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.Effect">
            <summary>
              <para>Gets the current <see cref="T:StatusEffect"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.StatusEffects">
            <summary>
              <para>Gets the status effect's <see cref="T:StatusEffects"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.Owner">
            <summary>
              <para>Gets the status effect's owner.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.CausedBy">
            <summary>
              <para>Gets the agent that caused the status effect.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.CurrentTime">
            <summary>
              <para>Gets or sets the status effect's current time.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.gc">
            <summary>
              <para>Gets the currently used instance of <see cref="T:GameController"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomEffect.EffectInfo">
            <summary>
              <para>Gets the custom effect's metadata.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.GetEffectTime">
            <summary>
              <para>Gets the default status effect time. Might get called on a partially initialized status effect.</para>
            </summary>
            <returns>The default status effect time, in seconds.</returns>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.GetEffectHate">
            <summary>
              <para>Gets the default status effect hate. Might get called on a partially initialized status effect.
              <br/>Usually, it's 5 for negative effects and 0 for positive.</para>
            </summary>
            <returns>The default status effect hate.</returns>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.OnAdded">
            <summary>
              <para>The method that is called when the status effect is added.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.OnRefreshed">
            <summary>
              <para>The method that is called when the status effect is refreshed.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.OnRemoved">
            <summary>
              <para>The method that is called when the status effect is removed.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomEffect.OnUpdated(RogueLibsCore.EffectUpdatedArgs)">
            <summary>
              <para>The method that is called as a part of the status effect's update coroutine.</para>
            </summary>
            <param name="e">The custom effect's update data.</param>
        </member>
        <member name="T:RogueLibsCore.EffectUpdatedArgs">
            <summary>
              <para>Represents the custom effect's update coroutine args.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectUpdatedArgs.UpdateDelay">
            <summary>
              <para>Gets or sets the coroutine's update delay, in seconds.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectUpdatedArgs.ShowTextOnRemoval">
            <summary>
              <para>Gets or sets whether to display the removal text, when the custom effect is removed.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectUpdatedArgs.IsFirstTick">
            <summary>
              <para>Gets or sets whether it's the coroutine's first tick.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.CustomEffectFactory">
            <summary>
              <para>Represents a factory of <see cref="T:RogueLibsCore.CustomEffect"/> hooks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomEffectFactory.TryCreate(StatusEffect,RogueLibsCore.IHook{StatusEffect}@)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomEffectFactory.AddEffect``1">
            <summary>
              <para>Adds the specified <typeparamref name="TEffect"/> type to the factory.</para>
            </summary>
            <typeparam name="TEffect">The <see cref="T:RogueLibsCore.CustomEffect"/> type to add.</typeparam>
            <returns>The added effect's metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.EffectInfo">
            <summary>
              <para>Represents the <see cref="T:RogueLibsCore.CustomEffect"/> type metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectInfo.Name">
            <summary>
              <para>Gets the custom effect's name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectInfo.Limitations">
            <summary>
              <para>Gets the custom effect's limitations flags.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectInfo.RemoveOnDeath">
            <summary>
              <para>Determines whether the status effect is removed on death.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectInfo.RemoveOnKnockOut">
            <summary>
              <para>Determines whether the status effect is removed on knockout.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectInfo.RemoveOnNextLevel">
            <summary>
              <para>Determines whether the status effect is removed between levels.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.EffectInfo.Get(System.Type)">
            <summary>
              <para>Gets the specified <see cref="T:RogueLibsCore.CustomEffect"/> <paramref name="type"/>'s metadata.</para>
            </summary>
            <param name="type">The <see cref="T:RogueLibsCore.CustomEffect"/> type to get the metadata for.</param>
            <returns>The specified <paramref name="type"/>'s metadata.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a <see cref="T:RogueLibsCore.CustomEffect"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.EffectInfo.Get``1">
            <summary>
              <para>Gets the specified <typeparamref name="TEffect"/>'s metadata.</para>
            </summary>
            <typeparam name="TEffect">The <see cref="T:RogueLibsCore.CustomEffect"/> type get the metadata for.</typeparam>
            <returns>The specified <typeparamref name="TEffect"/>'s metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.EffectNameAttribute">
            <summary>
              <para>Specifies a different name for the custom item to use.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectNameAttribute.Name">
            <summary>
              <para>Gets the custom effect's name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.EffectNameAttribute.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.EffectNameAttribute"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The custom effect's name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.EffectParametersAttribute">
            <summary>
              <para>Specifies custom effect's parameters.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectParametersAttribute.Limitations">
            <summary>
              <para>Gets the custom effect's limitations.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.EffectParametersAttribute.#ctor(RogueLibsCore.EffectLimitations)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.EffectParametersAttribute"/> class with the specified <paramref name="limitations"/>.</para>
            </summary>
            <param name="limitations"></param>
        </member>
        <member name="T:RogueLibsCore.EffectLimitations">
            <summary>
              <para>Represents a custom effect's limitations.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.EffectLimitations.None">
            <summary>
              <para>No limitations.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.EffectLimitations.RemoveOnDeath">
            <summary>
              <para>The effect will be removed on death.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.EffectLimitations.RemoveOnKnockOut">
            <summary>
              <para>The effect will be removed on knockout.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.EffectLimitations.RemoveOnNextLevel">
            <summary>
              <para>The effect will be removed on the next level.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.CustomTrait">
            <summary>
              <para>Represents a custom trait.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTrait.Trait">
            <summary>
              <para>Gets the current <see cref="T:Trait"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTrait.StatusEffects">
            <summary>
              <para>Gets the trait's <see cref="P:RogueLibsCore.CustomTrait.StatusEffects"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTrait.Owner">
            <summary>
              <para>Gets the trait's owner.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTrait.gc">
            <summary>
              <para>Gets the currently used instance of <see cref="T:GameController"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTrait.TraitInfo">
            <summary>
              <para>Gets the custom trait's metadata.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomTrait.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomTrait.OnAdded">
            <summary>
              <para>The method that is called when the trait is added.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomTrait.OnRemoved">
            <summary>
              <para>The method that is called when the trait is removed.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.ITraitUpdateable">
            <summary>
              <para>Indicates that a custom trait has an update coroutine.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ITraitUpdateable.OnUpdated(RogueLibsCore.TraitUpdatedArgs)">
            <summary>
              <para>The method that is called as a part of the trait's update coroutine.</para>
            </summary>
            <param name="e">The custom trait's update data.</param>
        </member>
        <member name="T:RogueLibsCore.TraitUpdatedArgs">
            <summary>
              <para>Represents the custom trait's update coroutine args.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitUpdatedArgs.UpdateDelay">
            <summary>
              <para>Gets or sets the coroutine's update delay, in seconds.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.CustomTraitFactory">
            <summary>
              <para>Represents a factory of <see cref="T:RogueLibsCore.CustomTrait"/> hooks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomTraitFactory.TryCreate(Trait,RogueLibsCore.IHook{Trait}@)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomTraitFactory.AddTrait``1">
            <summary>
              <para>Adds the specified <typeparamref name="TTrait"/> type to the factory.</para>
            </summary>
            <typeparam name="TTrait">The <see cref="T:RogueLibsCore.CustomTrait"/> type to add.</typeparam>
            <returns>The added trait's metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.TraitInfo">
            <summary>
              <para>Represents the <see cref="T:RogueLibsCore.CustomTrait"/> type metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitInfo.Name">
            <summary>
              <para>Gets the custom trait's name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitInfo.Get(System.Type)">
            <summary>
              <para>Gets the specified <see cref="T:RogueLibsCore.CustomTrait"/> <paramref name="type"/>'s metadata.</para>
            </summary>
            <param name="type">The <see cref="T:RogueLibsCore.CustomTrait"/> type to get the metadata for.</param>
            <returns>The specified <paramref name="type"/>'s metadata.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a <see cref="T:RogueLibsCore.CustomTrait"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.TraitInfo.Get``1">
            <summary>
              <para>Gets the specified <typeparamref name="TTrait"/>'s metadata.</para>
            </summary>
            <typeparam name="TTrait">The <see cref="T:RogueLibsCore.CustomTrait"/> type get the metadata for.</typeparam>
            <returns>The specified <typeparamref name="TTrait"/>'s metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.TraitNameAttribute">
            <summary>
              <para>Specifies a different name for the custom trait to use.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitNameAttribute.Name">
            <summary>
              <para>Gets the custom trait's name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitNameAttribute.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitNameAttribute"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The custom trait's name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.UnlocksMenu">
            <summary>
              <para>Represents a menu that can display unlocks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlocksMenu.#ctor(System.Collections.Generic.List{RogueLibsCore.DisplayedUnlock})">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.UnlocksMenu"/> class with the specified <paramref name="unlocks"/> list.</para>
            </summary>
            <param name="unlocks">The list of unlocks displayed in the menu.</param>
        </member>
        <member name="P:RogueLibsCore.UnlocksMenu.Type">
            <summary>
              <para>Gets the menu's type.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlocksMenu.Unlocks">
            <summary>
              <para>Gets the menu's unlocks list.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlocksMenu.Agent">
            <summary>
              <para>When overriden in a derived class, gets the agent associated with the menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlocksMenu.PlaySound(System.String)">
            <summary>
              <para>When overriden in a derived class, plays an audio clip with the specified <paramref name="clipName"/> in the menu.</para>
            </summary>
            <param name="clipName">The name of an audio clip to play.</param>
        </member>
        <member name="M:RogueLibsCore.UnlocksMenu.UpdateMenu">
            <summary>
              <para>When overriden in a derived class, updates the contents of the menu.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.CustomScrollingMenu">
            <summary>
              <para>The <see cref="T:ScrollingMenu"/> implementation of the <see cref="T:RogueLibsCore.UnlocksMenu"/> class.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomScrollingMenu.#ctor(ScrollingMenu,System.Collections.Generic.List{RogueLibsCore.DisplayedUnlock})">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.CustomScrollingMenu"/> class with the specified <paramref name="menu"/> and <paramref name="unlocks"/> list.</para>
            </summary>
            <param name="menu">The <see cref="T:ScrollingMenu"/> instance.</param>
            <param name="unlocks">The list of unlocks displayed in the menu.</param>
        </member>
        <member name="P:RogueLibsCore.CustomScrollingMenu.Menu">
            <summary>
              <para>Gets the <see cref="T:ScrollingMenu"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomScrollingMenu.Agent">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomScrollingMenu.PlaySound(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomScrollingMenu.UpdateMenu">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.CustomCharacterCreation">
            <summary>
              <para>The <see cref="T:CharacterCreation"/> implementation of the <see cref="T:RogueLibsCore.UnlocksMenu"/> class.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomCharacterCreation.#ctor(CharacterCreation,System.Collections.Generic.List{RogueLibsCore.DisplayedUnlock})">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.CustomCharacterCreation"/> class with the specified <paramref name="cc"/> and <paramref name="unlocks"/> list.</para>
            </summary>
            <param name="cc">The <see cref="T:CharacterCreation"/> instance.</param>
            <param name="unlocks">The list of unlocks displayed in the menu.</param>
        </member>
        <member name="P:RogueLibsCore.CustomCharacterCreation.CC">
            <summary>
              <para>Gets the <see cref="T:CharacterCreation"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomCharacterCreation.Agent">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomCharacterCreation.PlaySound(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomCharacterCreation.UpdateMenu">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.UnlocksMenuType">
            <summary>
              <para>Represents an unlocks menu type.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.Unknown">
            <summary>
              <para>An unknown menu type.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.MutatorMenu">
            <summary>
              <para>The Mutators Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.RewardsMenu">
            <summary>
              <para>The Rewards Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.TraitsMenu">
            <summary>
              <para>The Traits Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.MutatorConfigs">
            <summary>
              <para>The Mutator Configs Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.RewardConfigs">
            <summary>
              <para>The Reward Configs Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.TraitConfigs">
            <summary>
              <para>The Trait Configs Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.FloorsMenu">
            <summary>
              <para>The Floor Selection Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.NewLevelTraits">
            <summary>
              <para>The New Level Trait Selection Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.ItemTeleporter">
            <summary>
              <para>The Item Teleporter Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.Loadouts">
            <summary>
              <para>The Loadout Menu at the Home Base.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.TwitchRewards">
            <summary>
              <para>The Twitch Rewards Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.TwitchDisasters">
            <summary>
              <para>The Twitch Disasters Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.AB_UpgradeTrait">
            <summary>
              <para>The Upgrade Trait Menu in the Augmentation Booth.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.AB_RemoveTrait">
            <summary>
              <para>The Remove Trait Menu in the Augmentation Booth.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.AB_SwapTrait">
            <summary>
              <para>The Swap Trait Menu in the Augmentation Booth.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.CharacterSelect">
            <summary>
              <para>The Character Selection Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.Achievements">
            <summary>
              <para>The Achievements Menu.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlocksMenuType.CharacterCreation">
            <summary>
              <para>The Character Creation Menu.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.UnlockButtonState">
            <summary>
              <para>Represents the unlock's button state.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlockButtonState.Normal">
            <summary>
              <para>The normal state. Dark-blue button.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlockButtonState.Selected">
            <summary>
              <para>The selected state. Cyan button.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlockButtonState.Purchasable">
            <summary>
              <para>The purchasable state. Light-blue button.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlockButtonState.Locked">
            <summary>
              <para>The locked state. Purplish red button.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.UnlockButtonState.Disabled">
            <summary>
              <para>The disabled state. Gray button.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.HomeBaseUnlock">
            <summary>
              <para>Represents a Home Base unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.HomeBaseUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.HomeBaseUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.HomeBaseUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.HomeBaseUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.HomeBaseUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.HomeBaseUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's name.</param>
        </member>
        <member name="M:RogueLibsCore.HomeBaseUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.HomeBaseUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.HomeBaseUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.HomeBaseUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ExtraUnlock">
            <summary>
              <para>Represents an extra unlock, that is used for achievements in the game.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ExtraUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ExtraUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ExtraUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ExtraUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ExtraUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ExtraUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and achievement's name.</param>
        </member>
        <member name="M:RogueLibsCore.ExtraUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ExtraUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and achievement's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.ExtraUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ExtraUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.LoadoutUnlock">
            <summary>
              <para>Represents a Loadout unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.LoadoutUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.LoadoutUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.LoadoutUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.LoadoutUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.LoadoutUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.LoadoutUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's name.</param>
        </member>
        <member name="M:RogueLibsCore.LoadoutUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.LoadoutUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.LoadoutUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.LoadoutUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.AgentUnlock">
            <summary>
              <para>Represents an agent unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AgentUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AgentUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AgentUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AgentUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.AgentUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AgentUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and agent's name.</param>
        </member>
        <member name="M:RogueLibsCore.AgentUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AgentUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and agent's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.AgentUnlock.BigQuest">
            <summary>
              <para>Gets the <see cref="T:RogueLibsCore.BigQuestUnlock"/> associated with this agent.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.AgentUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AgentUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AgentUnlock.IsSSA">
            <summary>
              <para>Gets or sets whether this unlock's agent is a Super Special Abilities variant of another agent.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AgentUnlock.SetupUnlock">
            <summary>
              <para>Sets up the Agent's associated <see cref="T:RogueLibsCore.BigQuestUnlock"/>.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.AbilityUnlock">
            <summary>
              <para>Represents a special ability unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AbilityUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AbilityUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AbilityUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and special ability's name.</param>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AbilityUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and special ability's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.AbilityUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AbilityUnlock.IsAddedToCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AbilityUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AbilityUnlock.IsAvailableInCC">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.AbilityUnlock.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.AchievementUnlock">
            <summary>
              <para>Represents an achievement unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AchievementUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AchievementUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AchievementUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AchievementUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.AchievementUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AchievementUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and achievement's name.</param>
        </member>
        <member name="M:RogueLibsCore.AchievementUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.AchievementUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and achievement's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.AchievementUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.AchievementUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.AchievementUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.BigQuestUnlock">
            <summary>
              <para>Represents a Big Quest unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.BigQuestUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.BigQuestUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.BigQuestUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and Big Quest's name. Must be of format: "&lt;AgentUnlock&gt;_BQ".</param>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.BigQuestUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and Big Quest's name. Must be of format: "&lt;AgentUnlock&gt;_BQ".</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsAddedToCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsAvailableInCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsUnlocked">
            <summary>
              <para>Gets or sets whether the Big Quest is unlocked. This is synchronized with its <see cref="T:RogueLibsCore.AgentUnlock"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.IsCompleted">
            <summary>
              <para>Gets or sets whether the Big Quest is complete.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.BigQuestUnlock.Agent">
            <summary>
              <para>Gets the <see cref="T:RogueLibsCore.AgentUnlock"/> associated with this Big Quest.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.SetupUnlock">
            <summary>
              <para>Sets up the Big Quest's associated <see cref="T:RogueLibsCore.AgentUnlock"/>.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.GetName">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.BigQuestUnlock.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.FloorUnlock">
            <summary>
              <para>Represents a floor unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.FloorUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.FloorUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.FloorUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and floor's name.</param>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.FloorUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and floor's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.FloorUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.FloorUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.GetName">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.FloorUnlock.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ItemUnlock">
            <summary>
              <para>Represents an item unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and item's name.</param>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and item's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsAddedToCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsSelectedLoadout">
            <summary>
              <para>Gets or sets whether the item is selected as a Loadout.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsAvailableInCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ItemUnlock.IsAvailableInItemTeleporter">
            <summary>
              <para>Gets or sets whether the item is available in the Item Teleporter's menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ItemUnlock.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.MutatorUnlock">
            <summary>
              <para>Represents a mutator unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.MutatorUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.MutatorUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.MutatorUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and mutator's name.</param>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.MutatorUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and mutator's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.MutatorUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.MutatorUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.GetName">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.MutatorUnlock.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ReRollLoadoutsUnlock">
            <summary>
              <para>Represents a "Re-Roll Loadouts" button in the Loadout Menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ReRollLoadoutsUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ReRollLoadoutsUnlock"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ReRollLoadoutsUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ReRollLoadoutsUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ReRollLoadoutsUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ReRollLoadoutsUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.TraitUnlock">
            <summary>
              <para>Represents a trait unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitUnlock"/> class without a name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitUnlock"/> class without a name.</para>
            </summary>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and trait's name.</param>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.#ctor(System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitUnlock"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The unlock's and trait's name.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.TraitUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.TraitUnlock.IsAddedToCC">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.TraitUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.TraitUnlock.IsAvailableInCC">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.GetUpgradeCost">
            <summary>
              <para>Gets the trait's upgrade cost, in money.</para>
            </summary>
            <returns>The trait's upgrade cost, in money.</returns>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.GetRemovalCost">
            <summary>
              <para>Gets the trait's removal cost, in money.</para>
            </summary>
            <returns>The trait's removal cost, in money.</returns>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.GetSwapCost">
            <summary>
              <para>Gets the trait's swap cost, in money.</para>
            </summary>
            <returns>The trait's swap cost, in money.</returns>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.UpdateButton">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.TraitUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ClearAllMutatorsUnlock">
            <summary>
              <para>Represents a "Clear All" button in the Mutators Menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ClearAllMutatorsUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ClearAllMutatorsUnlock"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ClearAllMutatorsUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ClearAllMutatorsUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ClearAllMutatorsUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ClearAllItemsUnlock">
            <summary>
              <para>Represents a "Clear All" button in the Character Creation Items Menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ClearAllItemsUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ClearAllItemsUnlock"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ClearAllItemsUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ClearAllItemsUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ClearAllItemsUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.ClearAllTraitsUnlock">
            <summary>
              <para>Represents a "Clear All" button in the Character Creation Traits Menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ClearAllTraitsUnlock.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ClearAllTraitsUnlock"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ClearAllTraitsUnlock.IsAvailable">
            <inheritdoc/>
        </member>
        <member name="P:RogueLibsCore.ClearAllTraitsUnlock.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.ClearAllTraitsUnlock.OnPushedButton">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.CustomItem">
            <summary>
              <para>Represents a custom item.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.Item">
            <summary>
              <para>Gets the current <see cref="T:InvItem"/> instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.Inventory">
            <summary>
              <para>Gets the item's inventory.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.Owner">
            <summary>
              <para>Gets the item's owner.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.Count">
            <summary>
              <para>Gets or sets the item's current count.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.gc">
            <summary>
              <para>Gets the currently used instance of <see cref="T:GameController"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomItem.ItemInfo">
            <summary>
              <para>Gets the custom item's metadata.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomItem.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomItem.SetupDetails">
            <summary>
              <para>The method that is called when the item's details are set up.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomItem.GetCountString">
            <summary>
              <para>Returns the custom item's count text.</para>
            </summary>
            <returns>The custom count string, if overriden; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.IItemUsable">
            <summary>
              <para>Indicates that a custom item is usable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IItemUsable.UseItem">
            <summary>
              <para>Uses the item. The return value indicates whether the usage succeeded or failed.</para>
            </summary>
            <returns><see langword="true"/>, if the current item was successfully used; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.IItemCombinable">
            <summary>
              <para>Indicates that a custom item is combinable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IItemCombinable.CombineFilter(InvItem)">
            <summary>
              <para>Determines whether to highlight the <paramref name="other"/> item in the inventory when combining the current item.</para>
            </summary>
            <param name="other">The other item.</param>
            <returns><see langword="true"/>, if the current item can be combined with the <paramref name="other"/> item; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemCombinable.CombineItems(InvItem)">
            <summary>
              <para>Combines the current item with the <paramref name="other"/> item. The return value indicates whether the combining succeeded or failed.</para>
            </summary>
            <param name="other">The other item.</param>
            <returns><see langword="true"/>, if the current item was successfully combined with the <paramref name="other"/> item; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemCombinable.CombineCursorText(InvItem)">
            <summary>
              <para>Determines the cursor text when hovering over the <paramref name="other"/> item.</para>
            </summary>
            <param name="other">The other item.</param>
            <returns>The cursor text to display, or <see langword="null"/> to display the default cursor text.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemCombinable.CombineTooltip(InvItem)">
            <summary>
              <para>Determines the combine tooltip in the <paramref name="other"/> item's slot.</para>
            </summary>
            <param name="other">The other item.</param>
            <returns>The combine tooltip to display, or <see langword="null"/> to not display anything.</returns>
        </member>
        <member name="T:RogueLibsCore.IItemTargetable">
            <summary>
              <para>Indicates that a custom item is targetable.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IItemTargetable.TargetFilter(PlayfieldObject)">
            <summary>
              <para>Determines whether to highlight the <paramref name="target"/> object when targeting the current item.</para>
            </summary>
            <param name="target">The target object.</param>
            <returns><see langword="true"/>, if the current item can be targeted at the <paramref name="target"/> object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemTargetable.TargetObject(PlayfieldObject)">
            <summary>
              <para>Uses the current item on the <paramref name="target"/> object. The return value indicates whether the usage succeeded or failed.</para>
            </summary>
            <param name="target">The target object.</param>
            <returns><see langword="true"/>, if the item was successfully used on the <paramref name="target"/> object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemTargetable.TargetCursorText(PlayfieldObject)">
            <summary>
              <para>Determines the cursor text when hovering over the <paramref name="target"/> object.</para>
            </summary>
            <param name="target">The target object.</param>
            <returns>The cursor text to display, or <see langword="null"/> to display the default cursor text.</returns>
        </member>
        <member name="T:RogueLibsCore.IItemTargetableAnywhere">
            <summary>
              <para>Indicates that a custom item is targetable anywhere.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IItemTargetableAnywhere.TargetFilter(UnityEngine.Vector3)">
            <summary>
              <para>Determines whether to highlight the cursor when hovering over the specified <paramref name="position"/> and combining the current item.</para>
            </summary>
            <param name="position">The target position.</param>
            <returns><see langword="true"/>, if the current item can be targeted at the specified <paramref name="position"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemTargetableAnywhere.TargetPosition(UnityEngine.Vector3)">
            <summary>
              <para>Uses the current item on the specified <paramref name="position"/>. The return value indicates whether the usage succeeded or failed.</para>
            </summary>
            <param name="position">The target position.</param>
            <returns><see langword="true"/>, if the item was successfully used on the specified <paramref name="position"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IItemTargetableAnywhere.TargetCursorText(UnityEngine.Vector3)">
            <summary>
              <para>Determines the cursor text when hovering over the specified <paramref name="position"/>.</para>
            </summary>
            <param name="position">The target position.</param>
            <returns>The cursor text to display, or <see langword="null"/> to display the default cursor text.</returns>
        </member>
        <member name="T:RogueLibsCore.CustomTooltip">
            <summary>
              <para>Represents a custom tooltip.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.CustomTooltip"/> structure with the specified <paramref name="text"/>.</para>
            </summary>
            <param name="text">The tooltip's text.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.#ctor(System.String,UnityEngine.Color)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.CustomTooltip"/> structure with the specified <paramref name="text"/> and <paramref name="color"/>.</para>
            </summary>
            <param name="text">The tooltip's text.</param>
            <param name="color">The tooltip's text color.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.#ctor(RogueLibsCore.IName)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.CustomTooltip"/> structure with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The tooltip's localizable string.</param>
        </member>
        <member name="P:RogueLibsCore.CustomTooltip.Text">
            <summary>
              <para>Gets the tooltip's text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomTooltip.Color">
            <summary>
              <para>Gets the tooltip's text color.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.op_Implicit(System.String)~RogueLibsCore.CustomTooltip">
            <summary>
              <para>Implicitly converts a <see cref="T:System.String"/> into a <see cref="T:RogueLibsCore.CustomTooltip"/>.</para>
            </summary>
            <param name="text">The tooltip's text.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.op_Implicit(System.Int32)~RogueLibsCore.CustomTooltip">
            <summary>
              <para>Implicitly converts an <see cref="T:System.Int32"/> into a <see cref="T:RogueLibsCore.CustomTooltip"/>.</para>
            </summary>
            <param name="number">The tooltip's text.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.op_Implicit(System.Single)~RogueLibsCore.CustomTooltip">
            <summary>
              <para>Implicitly converts a <see cref="T:System.Single"/> into a <see cref="T:RogueLibsCore.CustomTooltip"/>.</para>
            </summary>
            <param name="number">The tooltip's text.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.op_Implicit(RogueLibsCore.CustomName)~RogueLibsCore.CustomTooltip">
            <summary>
              <para>Implicitly converts a <see cref="T:RogueLibsCore.CustomName"/> into a <see cref="T:RogueLibsCore.CustomTooltip"/>.</para>
            </summary>
            <param name="name">The tooltip's localizable string.</param>
        </member>
        <member name="M:RogueLibsCore.CustomTooltip.op_Implicit(RogueLibsCore.CustomNameInfo)~RogueLibsCore.CustomTooltip">
            <summary>
              <para>Implicitly converts a <see cref="T:RogueLibsCore.CustomNameInfo"/> into a <see cref="T:RogueLibsCore.CustomTooltip"/>.</para>
            </summary>
            <param name="nameInfo">The tooltip's localizable string.</param>
        </member>
        <member name="T:RogueLibsCore.CustomItemFactory">
            <summary>
              <para>Represents a factory of <see cref="T:RogueLibsCore.CustomItem"/> hooks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomItemFactory.TryCreate(InvItem,RogueLibsCore.IHook{InvItem}@)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomItemFactory.AddItem``1">
            <summary>
              <para>Adds the specified <typeparamref name="TItem"/> type to the factory.</para>
            </summary>
            <typeparam name="TItem">The <see cref="T:RogueLibsCore.CustomItem"/> type to add.</typeparam>
            <returns>The added item's metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.ItemInfo">
            <summary>
              <para>Represents the <see cref="T:RogueLibsCore.CustomItem"/> type metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemInfo.Name">
            <summary>
              <para>Gets the custom item's name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemInfo.Categories">
            <summary>
              <para>Gets the custom item's categories.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemInfo.IgnoredChecks">
            <summary>
              <para>Gets the collection of inventory checks, ignored by the custom item.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemInfo.Get(System.Type)">
            <summary>
              <para>Gets the specified <see cref="T:RogueLibsCore.CustomItem"/> <paramref name="type"/>'s metadata.</para>
            </summary>
            <param name="type">The <see cref="T:RogueLibsCore.CustomItem"/> type to get the metadata for.</param>
            <returns>The specified <paramref name="type"/>'s metadata.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a <see cref="T:RogueLibsCore.CustomItem"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.ItemInfo.Get``1">
            <summary>
              <para>Gets the specified <typeparamref name="TItem"/>'s metadata.</para>
            </summary>
            <typeparam name="TItem">The <see cref="T:RogueLibsCore.CustomItem"/> type get the metadata for.</typeparam>
            <returns>The specified <typeparamref name="TItem"/>'s metadata.</returns>
        </member>
        <member name="T:RogueLibsCore.ItemNameAttribute">
            <summary>
              <para>Specifies a different name for the custom item to use.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemNameAttribute.Name">
            <summary>
              <para>Gets the custom item's name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemNameAttribute.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemNameAttribute"/> class with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The custom item's name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.ItemCategoriesAttribute">
            <summary>
              <para>Specifies custom item's categories.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemCategoriesAttribute.Categories">
            <summary>
              <para>Gets the collection of custom item's categories.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemCategoriesAttribute.#ctor(System.String[])">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemCategoriesAttribute"/> class with the specified <paramref name="categories"/>.</para>
            </summary>
            <param name="categories">The custom item's categories.</param>
        </member>
        <member name="T:RogueLibsCore.IgnoreChecksAttribute">
            <summary>
              <para>Indicates that the custom item should ignore certain inventory checks.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IgnoreChecksAttribute.IgnoredChecks">
            <summary>
              <para>Gets the collection of inventory checks ignored by the item.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IgnoreChecksAttribute.#ctor(System.String[])">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.IgnoreChecksAttribute"/> class with the specified <paramref name="ignoreChecks"/>.</para>
            </summary>
            <param name="ignoreChecks">The inventory checks to ignore.</param>
        </member>
        <member name="T:RogueLibsCore.DisplayedUnlock">
            <summary>
              <para>Represents an unlock that can be displayed in the menus.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.#ctor(System.String,System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.DisplayedUnlock"/> class with the specified <paramref name="name"/> and <paramref name="type"/>.</para>
            </summary>
            <param name="name">The name of the unlock.</param>
            <param name="type">The type of the unlock.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.Menu">
            <summary>
              <para>Gets the unlocks menu that the unlock was last associated with.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.ButtonData">
            <summary>
              <para>Gets the button data that the unlock was last associated with.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.State">
            <summary>
              <para>Gets or sets the menu button's state.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.Text">
            <summary>
              <para>Gets or sets the menu button's text. Supports rich text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.SortingOrder">
            <summary>
              <para>Gets or sets the unlock's sorting order.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.SortingIndex">
            <summary>
              <para>Gets or sets the unlock's sorting index.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.DisplayedUnlock.IgnoreStateSorting">
            <summary>
              <para>Gets or sets whether the unlock's state (unlocked, purchasable, available or locked) should be ignored during sorting. Default: <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.CompareTo(RogueLibsCore.DisplayedUnlock)">
            <summary>
              <para>Compares the current unlock with an <paramref name="other"/> unlock and returns a value that indicates their relative order.</para>
            </summary>
            <param name="other">The unlock to compare with.</param>
            <returns>A value indicating the compared unlocks' relative order.</returns>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.UpdateButton">
            <summary>
              <para>Updates the unlock's menu button, using the <see cref="P:RogueLibsCore.UnlockWrapper.IsEnabled"/> property to determine whether the button is selected.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.UpdateButton(System.Boolean)">
            <summary>
              <para>Updates the unlock's menu button, using the specified <paramref name="isEnabledOrSelected"/> parameter to determine whether the button is selected.</para>
            </summary>
            <param name="isEnabledOrSelected">Determines whether the button is selected.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.UpdateButton(System.Boolean,RogueLibsCore.UnlockButtonState,RogueLibsCore.UnlockButtonState)">
            <summary>
              <para>Updates the unlock's menu button, using the specified <paramref name="isEnabledOrSelected"/> parameter to determine the button state between <paramref name="selected"/> and <paramref name="normal"/>.</para>
            </summary>
            <param name="isEnabledOrSelected">Determines whether <paramref name="selected"/> or <paramref name="normal"/> button state should used.</param>
            <param name="selected">Selected button state that is used if <paramref name="isEnabledOrSelected"/> is <see langword="true"/>.</param>
            <param name="normal">Normal button state that is used if <paramref name="isEnabledOrSelected"/> is <see langword="false"/>.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.OnPushedButton">
            <summary>
              <para>When overriden in a derived class, handles the menu button click.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.GetFancyName">
            <summary>
              <para>Returns the <i>fancy</i> representation of the unlock's name.</para>
            </summary>
            <returns>The unlock's localized name, with costs, if it's unlocked or can be unlocked; otherwise, "?????", with costs.</returns>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.GetFancyDescription">
            <summary>
              <para>Returns the <i>fancy</i> representation of the unlock's description.</para>
            </summary>
            <returns>The unlock's localized description, with cancellations and recommendations, if it's unlocked; otherwise, the unlock's localized description, with cancellations, recommendations and prerequisites, if it can be unlocked; otherwise, "?????", with prerequisites.</returns>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.AddCancellationsTo(System.String@)">
            <summary>
              <para>Adds cancellations to the end of the specified <paramref name="description"/>.</para>
            </summary>
            <param name="description">The description to append to.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.AddRecommendationsTo(System.String@)">
            <summary>
              <para>Adds recommendations to the end of the specified <paramref name="description"/>.</para>
            </summary>
            <param name="description">The description to append to.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.AddPrerequisitesTo(System.String@)">
            <summary>
              <para>Adds prerequisites to the end of the specified <paramref name="description"/>.</para>
            </summary>
            <param name="description">The description to append to.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.PlaySound(System.String)">
            <summary>
              <para>Plays an audio clip with the specified <paramref name="clipName"/> in the menu.</para>
            </summary>
            <param name="clipName">The name of the audio clip to play.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.SendAnnouncementInChat(System.String,System.String,System.String)">
            <summary>
              <para>Sends the specified <paramref name="msg1"/> in the chat as an announcement, with <paramref name="msg2"/> and <paramref name="msg3"/> specifying additional information.</para>
            </summary>
            <param name="msg1">The announcement message identifier.</param>
            <param name="msg2">The first of the additional identifiers.</param>
            <param name="msg3">The second of the additional identifiers.</param>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.UpdateMenu">
            <summary>
              <para>Updates the current menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.UpdateAllUnlocks">
            <summary>
              <para>Updates all unlocks in the current menu.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DisplayedUnlock.EnumerateCancellations">
            <summary>
              <para>Returns an enumerable collection of unlocks conflicting with the current unlock.</para>
            </summary>
            <returns>An enumerable collection of <see cref="T:RogueLibsCore.DisplayedUnlock"/>s representing conflicting unlocks.</returns>
        </member>
        <member name="T:RogueLibsCore.UnlocksExtensions">
            <summary>
              <para>Provides extension methods for the <see cref="T:Unlocks"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlocksExtensions.AllowUnlocksAnyway">
            <summary>
              <para>Determines whether the unlocks should be unlockable anyway.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlocksExtensions.DoUnlockForced(Unlocks,System.String,System.String)">
            <summary>
              <para>Forcefully unlocks an unlock with the specified <paramref name="unlockName"/> and <paramref name="unlockType"/>.</para>
            </summary>
            <param name="unlocks">The current unlocks.</param>
            <param name="unlockName">The name of the unlock to unlock.</param>
            <param name="unlockType">The type of the unlock to unlock.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlocks"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.UnlockWrapper">
            <summary>
              <para>Represents a generic unlock in the game.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.#ctor(System.String,System.String,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.UnlockWrapper"/> class with the specified <paramref name="name"/> and <paramref name="type"/>.</para>
            </summary>
            <param name="name">The name of the unlock.</param>
            <param name="type">The type of the unlock.</param>
            <param name="unlockedFromStart">Determines whether the unlock is unlocked by default.</param>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Name">
            <summary>
              <para>Gets the unlock's name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Type">
            <summary>
              <para>Gets the unlock's type.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Unlock">
            <summary>
              <para>Gets the unlock that the wrapper is attached to.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.IsUnlocked">
            <summary>
              <para>Gets or sets whether the unlock is unlocked.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.UnlockCost">
            <summary>
              <para>Gets or sets the unlock's unlock cost, in nuggets.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.LoadoutCost">
            <summary>
              <para>Gets or sets the unlock's loadout cost, in nuggets.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.CharacterCreationCost">
            <summary>
              <para>Gets or sets the unlock's character creation cost, in points.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.IsEnabled">
            <summary>
              <para>Gets or sets whether the unlock is enabled and active in the game.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.IsAvailable">
            <summary>
              <para>Gets or sets whether the unlock is available in the primary menus.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Cancellations">
            <summary>
              <para>Gets or sets the list containing the unlock's cancellations - conflicting unlocks.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Recommendations">
            <summary>
              <para>Gets or sets the list containing the unlock's recommendations - purely aesthetic.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.Prerequisites">
            <summary>
              <para>Gets or sets the list containing the unlock's prerequisites - unlocks that must be unlocked in order to unlock this one.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.SetupUnlock">
            <summary>
              <para>Sets up the unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.CanBeUnlocked">
            <summary>
              <para>Determines whether the unlock can be unlocked right now, in terms of prerequisites and other requirements.</para>
            </summary>
            <returns><see langword="true"/>, if the unlock can be unlocked right now; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.UpdateUnlock">
            <summary>
              <para>Updates the unlock's unlock information. When overriden, you must set the <see cref="F:Unlock.nowAvailable"/> field.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.GetName">
            <summary>
              <para>Gets the unlock's displayed name.</para>
            </summary>
            <returns>The unlock's localized name, if it's unlocked or can be unlocked; otherwise, "?????".</returns>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.GetDescription">
            <summary>
              <para>Gets the unlock's displayed description.</para>
            </summary>
            <returns>The unlock's localized description, if it's unlocked or can be unlocked; otherwise, "?????".</returns>
        </member>
        <member name="M:RogueLibsCore.UnlockWrapper.GetImage">
            <summary>
              <para>Gets the unlock's displayed image.</para>
            </summary>
            <returns>The unlock's image, if it's unlocked or can be unlocked; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="P:RogueLibsCore.UnlockWrapper.gc">
            <summary>
              <para>Gets the currently used instance of <see cref="T:GameController"/>.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IUnlockInCC">
            <summary>
              <para>Represents an unlock that is available in the Character Creation menu.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IUnlockInCC.IsAddedToCC">
            <summary>
              <para>Gets or sets whether the unlock is added to a custom character.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IUnlockInCC.IsAvailableInCC">
            <summary>
              <para>Gets or sets whether the unlock is available in the Character Creation menu.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IName">
            <summary>
              <para>Represents a localizable string.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IName.Item(RogueLibsCore.LanguageCode)">
            <summary>
              <para>Gets or sets the specified <paramref name="language"/>'s localization text.</para>
            </summary>
            <param name="language">The language to get or set the localization text for.</param>
            <returns>The specified <paramref name="language"/>'s localization text, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.CustomName">
            <summary>
              <para>The implementation of the <see cref="T:RogueLibsCore.IName"/> interface, used by the <see cref="T:RogueLibsCore.CustomNameProvider"/>. Provides properties for getting and setting the 8 default languages' localization texts.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Name">
            <summary>
              <para>Gets the localizable string's name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Type">
            <summary>
              <para>Gets the localizable string's type.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.English">
            <summary>
              <para>Gets or sets the English localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Spanish">
            <summary>
              <para>Gets or sets the Spanish localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Chinese">
            <summary>
              <para>Gets or sets the Chinese localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.German">
            <summary>
              <para>Gets or sets the German localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Brazilian">
            <summary>
              <para>Gets or sets the Brazilian localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.French">
            <summary>
              <para>Gets or sets the French localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Russian">
            <summary>
              <para>Gets or sets the Russian localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Korean">
            <summary>
              <para>Gets or sets the Korean localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomName.Item(RogueLibsCore.LanguageCode)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomName.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.CustomNameInfo">
            <summary>
              <para>The <see langword="struct"/> implementation of the <see cref="T:RogueLibsCore.IName"/> interface. Provides properties for getting and setting the 8 default languages' localization texts.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomNameInfo.#ctor(System.String)">
            <summary>
              <para>Initializes a new instance of <see cref="T:RogueLibsCore.CustomNameInfo"/> structure with the specified <paramref name="english"/> localization text.</para>
            </summary>
            <param name="english">The English localization text.</param>
        </member>
        <member name="M:RogueLibsCore.CustomNameInfo.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{RogueLibsCore.LanguageCode,System.String}})">
            <summary>
              <para>Initializes a new instance of <see cref="T:RogueLibsCore.CustomNameInfo"/> structure with localization texts from the specified <paramref name="dictionary"/>.</para>
            </summary>
            <param name="dictionary">The dictionary with localization texts.</param>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.English">
            <summary>
              <para>Gets or sets the English localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Spanish">
            <summary>
              <para>Gets or sets the Spanish localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Chinese">
            <summary>
              <para>Gets or sets the Chinese localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.German">
            <summary>
              <para>Gets or sets the German localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Brazilian">
            <summary>
              <para>Gets or sets the Brazilian localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.French">
            <summary>
              <para>Gets or sets the French localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Russian">
            <summary>
              <para>Gets or sets the Russian localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Korean">
            <summary>
              <para>Gets or sets the Korean localization text.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.CustomNameInfo.Item(RogueLibsCore.LanguageCode)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomNameInfo.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.LanguageCode">
            <summary>
              <para>Represents a language in the game.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.English">
            <summary>
              <para>The English language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.Spanish">
            <summary>
              <para>The Spanish language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.Chinese">
            <summary>
              <para>The Chinese language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.German">
            <summary>
              <para>The German language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.Brazilian">
            <summary>
              <para>The Brazilian language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.French">
            <summary>
              <para>The French language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.Russian">
            <summary>
              <para>The Russian language.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.LanguageCode.Korean">
            <summary>
              <para>The Korean language.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.LanguageService">
            <summary>
              <para>Provides static methods and properties for localization and translation.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.LanguageService.NameDB">
            <summary>
              <para>Gets the currently used instance of <see cref="T:NameDB"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.LanguageService.Current">
            <summary>
              <para>Gets the currently selected language.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.LanguageService.FallBack">
            <summary>
              <para>Gets or sets the fall-back language that will be used, when the current language's localization string is not found. Default: <see cref="F:RogueLibsCore.LanguageCode.English"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.LanguageService.Languages">
            <summary>
              <para>Returns a read-only dictionary of languages currently existing in the game.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.LanguageService.GetLanguageName(RogueLibsCore.LanguageCode)">
            <summary>
              <para>Returns the language <paramref name="code"/>'s name.</para>
            </summary>
            <param name="code">The language code to get a name for.</param>
            <returns>The specified language <paramref name="code"/>'s name, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.LanguageService.RegisterLanguageCode(System.String,RogueLibsCore.LanguageCode)">
            <summary>
              <para>Adds the specified <paramref name="languageName"/> to the game, and sets its language <paramref name="code"/>.</para>
            </summary>
            <param name="languageName">The language name to add into the game.</param>
            <param name="code">The language code that will be used to represent the language.</param>
        </member>
        <member name="M:RogueLibsCore.LanguageService.GetCurrent(RogueLibsCore.IName)">
            <summary>
              <para>Gets the localization text for the current language.</para>
            </summary>
            <param name="name">The current localizable string instance.</param>
            <returns>The current language's localization string, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.LanguageService.GetCurrentOrDefault(RogueLibsCore.IName)">
            <summary>
              <para>Gets the localization text for the current language, or the fall-back language, if the current language's localization text is not found.</para>
            </summary>
            <param name="name">The current localizable string instance.</param>
            <returns>The current language's localization string, if found; otherwise, the fall-back language's localization string, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.INameProvider">
            <summary>
              <para>Represents a localization text provider.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.INameProvider.GetName(System.String,System.String,System.String@)">
            <summary>
              <para>Tries to get the localization text for the specified <paramref name="name"/> and <paramref name="type"/>.</para>
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="type">The type of the entry.</param>
            <param name="result">The localization text, or <see langword="null"/>, if a valid localization text could not be found.</param>
        </member>
        <member name="T:RogueLibsCore.CustomNameProvider">
            <summary>
              <para>The default implementation of the <see cref="T:RogueLibsCore.INameProvider"/> interface that uses instances of the <see cref="T:RogueLibsCore.CustomName"/> class.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.CustomNameProvider.CustomNames">
            <summary>
              <para>The <see cref="T:RogueLibsCore.CustomName"/> dictionary used by the provider, organized by type and name.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.CustomNameProvider.GetName(System.String,System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.CustomNameProvider.AddName(System.String,System.String,RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Adds a <see cref="T:RogueLibsCore.CustomName"/> with the specified <paramref name="name"/>, <paramref name="type"/> and localization <paramref name="info"/>.</para>
            </summary>
            <param name="name">The name of the <see cref="T:RogueLibsCore.CustomName"/> to create.</param>
            <param name="type">The type of the <see cref="T:RogueLibsCore.CustomName"/> to create.</param>
            <param name="info">The localization data to initialize <see cref="T:RogueLibsCore.CustomName"/> with.</param>
            <returns>The initialized <see cref="T:RogueLibsCore.CustomName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A localizable string with the specified <paramref name="name"/> and <paramref name="type"/> already exists in the provider's dictionary.</exception>
        </member>
        <member name="T:RogueLibsCore.DialogueNameProvider">
            <summary>
              <para>The implementation of the <see cref="T:RogueLibsCore.INameProvider"/> interface that resolves dialogue names with "NA_" prefix (No Agent).</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.DialogueNameProvider.GetName(System.String,System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.InventoryChecks">
            <summary>
              <para>Provides methods to add inventory checks.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.AddItemUsingCheck(System.String,RogueLibsCore.RogueEventHandler{RogueLibsCore.OnItemUsingArgs})">
            <summary>
              <para>Adds an item usage inventory check with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the inventory check to add.</param>
            <param name="handler">The inventory check handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.AddItemsCombiningCheck(System.String,RogueLibsCore.RogueEventHandler{RogueLibsCore.OnItemsCombiningArgs})">
            <summary>
              <para>Adds an item combining inventory check with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the inventory check to add.</param>
            <param name="handler">The inventory check handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.AddItemTargetingCheck(System.String,RogueLibsCore.RogueEventHandler{RogueLibsCore.OnItemTargetingArgs})">
            <summary>
              <para>Adds an item targeting inventory check with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the inventory check to add.</param>
            <param name="handler">The inventory check handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.AddItemTargetingAnywhereCheck(System.String,RogueLibsCore.RogueEventHandler{RogueLibsCore.OnItemTargetingAnywhereArgs})">
            <summary>
              <para>Adds an item targeting anywhere inventory check with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the inventory check to add.</param>
            <param name="handler">The inventory check handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.IsCheckAllowed(InvItem,System.String)">
            <summary>
              <para>Determines whether the specified <paramref name="checkName"/> is allowed on the specified <paramref name="item"/>.</para>
            </summary>
            <param name="item">The item to check whether the inventory check is allowed for.</param>
            <param name="checkName">The name of the inventory check.</param>
            <returns><see langword="true"/>, if the inventory check is allowed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.InventoryChecks.IsCheckAllowed(RogueLibsCore.CustomItem,System.String)">
            <summary>
              <para>Determines whether the specified <paramref name="checkName"/> is allowed on the specified <paramref name="customItem"/>.</para>
            </summary>
            <param name="customItem">The custom item to check whether the inventory check is allowed for.</param>
            <param name="checkName">The name of the inventory check.</param>
            <returns><see langword="true"/>, if the inventory check is allowed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.OnItemUsingArgs">
            <summary>
              <para>Represents the item usage inventory check args.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnItemUsingArgs.#ctor(InvItem,Agent)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.OnItemUsingArgs"/> class with the specified <paramref name="item"/> and <paramref name="user"/>.</para>
            </summary>
            <param name="item">The item being used.</param>
            <param name="user">The agent using the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or <paramref name="user"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:RogueLibsCore.OnItemUsingArgs.Inventory">
            <summary>
              <para>Gets the item's inventory.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemUsingArgs.Item">
            <summary>
              <para>Gets the item being used.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemUsingArgs.User">
            <summary>
              <para>Gets or sets the agent using the item.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.OnItemsCombiningArgs">
            <summary>
              <para>Represents the item combining inventory check args.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnItemsCombiningArgs.#ctor(InvItem,InvItem,Agent)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.OnItemsCombiningArgs"/> class with the specified <paramref name="item"/>, <paramref name="otherItem"/> and <paramref name="combiner"/>.</para>
            </summary>
            <param name="item">The item being combined.</param>
            <param name="otherItem">The item being combined with.</param>
            <param name="combiner">The agent combining the two items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>, <paramref name="otherItem"/> or <paramref name="combiner"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:RogueLibsCore.OnItemsCombiningArgs.Inventory">
            <summary>
              <para>Gets the item's inventory.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemsCombiningArgs.Item">
            <summary>
              <para>Gets the item being combined.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemsCombiningArgs.OtherItem">
            <summary>
              <para>Gets or sets the item being combined with.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemsCombiningArgs.Combiner">
            <summary>
              <para>Gets or sets the agent combining the two items.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.OnItemTargetingArgs">
            <summary>
              <para>Represents the item targeting inventory check args.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnItemTargetingArgs.#ctor(InvItem,PlayfieldObject,Agent)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.OnItemTargetingArgs"/> class with the specified <paramref name="item"/>, <paramref name="targetObject"/> and <paramref name="user"/>.</para>
            </summary>
            <param name="item">The item being used.</param>
            <param name="targetObject">The object being targeted.</param>
            <param name="user">The agent using the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>, <paramref name="targetObject"/> or <paramref name="user"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingArgs.Inventory">
            <summary>
              <para>Gets the item's inventory.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingArgs.Item">
            <summary>
              <para>Gets the item being used.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingArgs.Target">
            <summary>
              <para>Gets or sets the object being targeted.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingArgs.User">
            <summary>
              <para>Gets or sets the agent using the item.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.OnItemTargetingAnywhereArgs">
            <summary>
              <para>Represents the item targeting anywhere inventory check args.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.OnItemTargetingAnywhereArgs.#ctor(InvItem,UnityEngine.Vector2,Agent)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.OnItemTargetingAnywhereArgs"/> class with the specified <paramref name="item"/>, <paramref name="position"/> and <paramref name="user"/>.</para>
            </summary>
            <param name="item">The item being used.</param>
            <param name="position">The position being targeted.</param>
            <param name="user">The agent using the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or <paramref name="user"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingAnywhereArgs.Inventory">
            <summary>
              <para>Gets the item's inventory.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingAnywhereArgs.Item">
            <summary>
              <para>Gets the item being used.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingAnywhereArgs.Target">
            <summary>
              <para>Gets or sets the position being targeted.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.OnItemTargetingAnywhereArgs.User">
            <summary>
              <para>Gets or sets the agent using the item.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueEvent`1">
            <summary>
              <para>Represents an event, that can stop its execution once the event args are handled, and determines whether the planned action was cancelled by any of the subscribers.</para>
            </summary>
            <typeparam name="TArgs">The <see cref="T:RogueLibsCore.RogueEventArgs"/> used by the event.</typeparam>
        </member>
        <member name="M:RogueLibsCore.RogueEvent`1.Subscribe(RogueLibsCore.RogueEventHandler{`0})">
            <summary>
              <para>Subscribes a new subscriber with the specified <paramref name="handler"/>.</para>
            </summary>
            <param name="handler">The handler of the subscriber.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueEvent`1.Subscribe(System.String,RogueLibsCore.RogueEventHandler{`0})">
            <summary>
              <para>Subscribes a new subscriber with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the subscriber.</param>
            <param name="handler">The handler of the subscriber.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueEvent`1.Unsubscribe(RogueLibsCore.RogueEventHandler{`0})">
            <summary>
              <para>Unsubscribes all subscribers with the specified <paramref name="handler"/>.</para>
            </summary>
            <param name="handler">The handler of the subscribers to unsubscribe.</param>
            <returns><see langword="true"/>, if at least one subscriber was successfully unsubscribed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueEvent`1.Unsubscribe(System.String)">
            <summary>
              <para>Unsubscribes all subscribers with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The name of the subscribers to unsubscribe.</param>
            <returns><see langword="true"/>, if at least one subscriber was successfully unsubscribed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueEvent`1.Raise(`0,System.Collections.Generic.ICollection{System.String})">
            <summary>
              <para>Raises an event with the specified <paramref name="args"/>, ignoring subscribers with names from the specified <paramref name="ignoreList"/>.</para>
            </summary>
            <param name="args">The event args to raise an event with.</param>
            <param name="ignoreList">The names of the subscribers to ignore.</param>
            <returns><see langword="true"/>, if the action was not cancelled by any of the subscribers; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.RogueEventArgs">
            <summary>
              <para>Represents event args for the <see cref="T:RogueLibsCore.RogueEvent`1"/> class.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueEventArgs.Handled">
            <summary>
              <para>Determines whether the event is handled, and other subscribers should not be called.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueEventArgs.Cancel">
            <summary>
              <para>Determines whether the event's action should be cancelled and not get executed.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueEventSubscriber`1">
            <summary>
              <para>Represents an event subscriber for the <see cref="T:RogueLibsCore.RogueEvent`1"/> class.</para>
            </summary>
            <typeparam name="TArgs">The <see cref="T:RogueLibsCore.RogueEventArgs"/> used by the event.</typeparam>
        </member>
        <member name="M:RogueLibsCore.RogueEventSubscriber`1.#ctor(System.String,RogueLibsCore.RogueEventHandler{`0})">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.RogueEventSubscriber`1"/> class with the specified <paramref name="name"/> and <paramref name="handler"/>.</para>
            </summary>
            <param name="name">The name of the subscriber.</param>
            <param name="handler">The handler of the subscriber.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:RogueLibsCore.RogueEventSubscriber`1.Name">
            <summary>
              <para>Gets the subscriber's name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueEventSubscriber`1.Handler">
            <summary>
              <para>Gets the subscriber's handler.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueEventHandler`1">
            <summary>
              <para>Represents an event handler for the <see cref="T:RogueLibsCore.RogueEvent`1"/> class.</para>
            </summary>
            <typeparam name="TArgs">The <see cref="T:RogueLibsCore.RogueEventArgs"/> used by the event.</typeparam>
            <param name="e">The event args.</param>
        </member>
        <member name="T:RogueLibsCore.IHook">
            <summary>
              <para>Represents a hook.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IHook.Initialize">
            <summary>
              <para>Initializes the hook.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IHook.Instance">
            <summary>
              <para>Gets or sets the instance that the hook is attached to.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IHook`1">
            <summary>
              <para>Represents a hook, attachable to instances of type <typeparamref name="T"/>.</para>
            </summary>
            <typeparam name="T">The type of objects that the hook can be attached to.</typeparam>
        </member>
        <member name="P:RogueLibsCore.IHook`1.Instance">
            <summary>
              <para>Gets or sets the instance that the hook is attached to.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.HookBase`1">
            <summary>
              <para>Represents a hook base. Implements the interfaces, leaving only one abstract method to implement.</para>
            </summary>
            <typeparam name="T">The type of objects that the hook can be attached to.</typeparam>
        </member>
        <member name="M:RogueLibsCore.HookBase`1.Initialize">
            <summary>
              <para>Initializes the hook.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.HookBase`1.Instance">
            <summary>
              <para>Gets or sets the instance that the hook is attached to.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IHookController">
            <summary>
              <para>Represents a collection of hooks, attached to a single object.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.IHookController.Instance">
            <summary>
              <para>Gets the object that the hooks are attached to.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IHookController.AddHook(RogueLibsCore.IHook)">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current instance.</para>
            </summary>
            <param name="hook">The hook to attach to the current instance.</param>
        </member>
        <member name="M:RogueLibsCore.IHookController.RemoveHook(RogueLibsCore.IHook)">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current instance.</para>
            </summary>
            <param name="hook">The hook to detach from the current instance.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IHookController.GetHook``1">
            <summary>
              <para>Gets a hook from the collection that is assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hook to search for.</typeparam>
            <returns>A hook that is assignable to a variable of <typeparamref name="THook"/> type, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.IHookController.GetHooks``1">
            <summary>
              <para>Returns an enumerable collection of all hooks in the collection that are assignable to a variable of <typeparamref name="THook"/> type.</para>
            </summary>
            <typeparam name="THook">The type of the hooks to search for.</typeparam>
            <returns>An enumerable collection of hooks that are assignable to a variable of <typeparamref name="THook"/> type.</returns>
        </member>
        <member name="T:RogueLibsCore.IHookController`1">
            <summary>
              <para>Represents a collection of hooks, attached to a single instance of type <typeparamref name="T"/>.</para>
            </summary>
            <typeparam name="T">The type of objects, that the hooks can be attached to.</typeparam>
        </member>
        <member name="P:RogueLibsCore.IHookController`1.Instance">
            <summary>
              <para>Gets the instance of type <typeparamref name="T"/> that the hooks are attached to.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IHookController`1.AddHook(RogueLibsCore.IHook{`0})">
            <summary>
              <para>Attaches the specified <paramref name="hook"/> to the current instance.</para>
            </summary>
            <param name="hook">The hook to attach to the current instance.</param>
        </member>
        <member name="M:RogueLibsCore.IHookController`1.RemoveHook(RogueLibsCore.IHook{`0})">
            <summary>
              <para>Detaches the specified <paramref name="hook"/> from the current instance.</para>
            </summary>
            <param name="hook">The hook to detach from the current instance.</param>
            <returns><see langword="true"/>, if the hook was successfully detached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.HookController`1">
            <summary>
              <para>The default implementation of <see cref="T:RogueLibsCore.IHookController`1"/>.</para>
            </summary>
            <typeparam name="T">The type of objects that the hooks can be attached to.</typeparam>
        </member>
        <member name="M:RogueLibsCore.HookController`1.#ctor(`0)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.HookController`1"/> class with the specified <paramref name="instance"/>.</para>
            </summary>
            <param name="instance">An object that the hooks will be attached to.</param>
        </member>
        <member name="P:RogueLibsCore.HookController`1.Instance">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.HookController`1.AddHook(RogueLibsCore.IHook{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.HookController`1.AddHook``1">
            <summary>
              <para>Creates a hook of the specified <typeparamref name="THook"/> type using its default constructor and attaches it to the current instance.</para>
            </summary>
            <typeparam name="THook">The type of the hook to create and attach to the current instance.</typeparam>
            <returns>The created hook of the specified <typeparamref name="THook"/> type.</returns>
        </member>
        <member name="M:RogueLibsCore.HookController`1.RemoveHook(RogueLibsCore.IHook{`0})">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.HookController`1.RemoveHook``1">
            <summary>
              <para>Detaches a hook of the specified <typeparamref name="THook"/> type from the current instance.</para>
            </summary>
            <typeparam name="THook">The type of the hook to detach from the current instance.</typeparam>
            <returns><see langword="true"/>, if a hook of the specified <typeparamref name="THook"/> type was successfully detached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.HookController`1.GetHook``1">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.HookController`1.GetHooks``1">
            <inheritdoc/>
        </member>
        <member name="M:RogueLibsCore.HookController`1.GetHooks">
            <summary>
              <para>Gets all hooks attached to the current instance.</para>
            </summary>
            <returns>A collection of hooks attached to the current instance.</returns>
        </member>
        <member name="M:RogueLibsCore.HookController`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.IHookFactory">
            <summary>
              <para>Represents a hook factory.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IHookFactory.TryCreate(System.Object,RogueLibsCore.IHook@)">
            <summary>
              <para>Tries to create a hook for the specified <paramref name="instance"/>, and returns a value that indicates whether a hook was created successfully.</para>
            </summary>
            <param name="instance">The object to create a hook for.</param>
            <param name="hook">A hook created for the specified <paramref name="instance"/>.</param>
            <returns><see langword="true"/>, if a hook was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.IHookFactory`1">
            <summary>
              <para>Represents a hook factory, that creates hooks attachable to instances of type <typeparamref name="T"/>.</para>
            </summary>
            <typeparam name="T">The type of objects that the created hooks can be attached to.</typeparam>
        </member>
        <member name="M:RogueLibsCore.IHookFactory`1.TryCreate(`0,RogueLibsCore.IHook{`0}@)">
            <summary>
              <para>Tries to create a hook for the specified <paramref name="instance"/> of type <typeparamref name="T"/>, and returns a value that indicates whether a hook was created successfully.</para>
            </summary>
            <param name="instance">The instance of type <typeparamref name="T"/> to create a hook for.</param>
            <param name="hook">A hook created for the specified <paramref name="instance"/> of type <typeparamref name="T"/>.</param>
            <returns><see langword="true"/>, if a hook was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.HookFactoryBase`1">
            <summary>
              <para>Represents a hook factory base. Implements the interfaces, leaving only one abstract method to implement.</para>
            </summary>
            <typeparam name="T">The type of objects that the created hooks can be attached to.</typeparam>
        </member>
        <member name="M:RogueLibsCore.HookFactoryBase`1.TryCreate(`0,RogueLibsCore.IHook{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:RogueLibsCore.IDoUpdate">
            <summary>
              <para>Indicates that this hook class should be updated with Unity's Update method.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IDoUpdate.Update">
            <summary>
              <para>The Unity's Update method, that is called once per frame.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.IDoFixedUpdate">
            <summary>
              <para>Indicates that this hook class should be updated with Unity's FixedUpdate method.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.IDoFixedUpdate.FixedUpdate">
            <summary>
              <para>The Unity's FixedUpdate method, that is called approximately 60 times per second, or 100 times per second when everything's slowed down.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueCategories">
            <summary>
              <para>The collection of item and trait categories used in the game. Use it to avoid typos.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Food">
            <summary>
              <para>The category for items, that are related to food.
              <br/>Examples: Fud, Ham Sandwich, Bacon Cheeseburger, Banana, Mini Fridge.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Drugs">
            <summary>
              <para>The category for items, that are in some way related to drugs, or ingestable/inhalable non-drugs.
              <br/>Examples: Syringe, Cocktail, Electro Pill, Rage Poison, Resurrection Shampoo, Antidote, Cologne.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Alcohol">
            <summary>
              <para>The category for items, that are, or in some way related to, alcohol.
              <br/>Examples: Beer, Whiskey.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Health">
            <summary>
              <para>The category for items, that are in some way related to health.
              <br/>Examples: First Aid Kit, Blood Bag.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Sex">
            <summary>
              <para>The category for items, that are in some way related to sex. Yeah, Matt added that for some reason.
              <br/>Examples: Codpiece, Condom.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Technology">
            <summary>
              <para>The category for items, that are in some way related to the technological/scientific progress.
              <br/>Examples: Ammo Processor, Melee Durability Spray, Blindenizer, Drink Mixer, Monkey Barrel.
              <br/>Also, for some reason, includes the Shapeshifter's Possession Stone.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NonUsableTool">
            <summary>
              <para>The category for items, that are not usable <b>directly</b>, but usable in certain situations or on certain objects.
              <br/>Examples: Lockpick, Window Cutter, Free Item Voucher, Door Detonator, Slave Helmet Remover.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Passive">
            <summary>
              <para>The category for items, that work passively.
              <br/>Examples: Money, Nugget, Quick Escape Teleporter, Translator, Cube of Lampey.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Usable">
            <summary>
              <para>The category for items, that are usable <b>directly</b>.
              <br/>Examples: Necronomicon, Fireworks, Walkie-Talkie, Cigarette Lighter, Cardboard Box.
              <br/>Also includes Slave Helmet Remover for some reason.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Weird">
            <summary>
              <para>The category for items, that are in some way related to magic, religion or occult.
              <br/>Examples: Necronomicon, Mood Ring, Magic Lamp, Boo-Urn, Voodoo Doll.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Weapons">
            <summary>
              <para>The category for items, that are in some way related to weapons, weapon mods or armor.
              <br/>Examples: Bear Trap, Crowbar, Rate of Fire Mod, Shotgun, Bracelet of Strength, Sticky Glove.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NonStandardWeapons">
            <summary>
              <para>The category for items, that are considered to be "unusual" weapons, but capable of doing harm.
              <br/>Examples: Rocket Launcher, Freeze Ray, Flamethrower, Shrink Ray, Ghost Gibber.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NonStandardWeapons2">
            <summary>
              <para>The category for items, that are considered to be "unusual" weapons, but usually harmless.
              <br/>Examples: Water Cannon, Research Gun, Water Pistol, Fire Extinguisher, Tranquilizer Gun.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NonViolent">
            <summary>
              <para>The category for items, that can be considered non-violent weapons.
              <br/>Examples: Water Cannon, Banana Peel, EMP Grenade, Research Gun, Paralyzer Trap.
              <br/>For some reason, includes Wrestler's Toss ability.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NotRealWeapons">
            <summary>
              <para>The category for items, that are not usually used to inflict harm (well, at least directly).
              <br/>Examples: Oil Container, Research Gun.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.MeleeAccessory">
            <summary>
              <para>The category for items, that affect or are affected by melee weapons in some way.
              <br/>Examples: Melee Durability Spray.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.GunAccessory">
            <summary>
              <para>The category for items, that affect or are affected by guns in some way.
              <br/>Examples: Ammo Processor, Bulletproof Vest, Ammo Capacity Mod, Bomb Maker, Kill Ammunizer.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Supplies">
            <summary>
              <para>The category for... uh... everything, that can be found at the construction site? or a warehouse?.. Idk.
              <br/>Examples: Safe Cracking Tool, First Aid Kit, Soldier Helmet, Augmentation Canister, Gas Mask, Hard Hat, Saw, Crowbar, Mini Fridge, Jackhammer, Lockpick, Blowtorch, Power Drill, Blood Bag, Cardboard Box, Cigarette Lighter, Chainsaw, Safe Buster, Matches, Rag, Shovel, Rope, Grappling Hook, Window Cutter, Wrench, Slave Helmet.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.NPCsCantPickUp">
            <summary>
              <para>The category for items, that NPCs shouldn't be able to pick up and use against the player.
              <br/>Examples: Freeze Ray, Laser Gun, Leaf Blower, Water Pistol, Tranquilizer Gun.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Nugget">
            <summary>
              <para>The category for different types of nuggets.
              <br/>Examples: Chicken Nugget, Gold Nugget, Nougat, Nugget Hop, NuGet.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Money">
            <summary>
              <para>The category for different types of currency.
              <br/>Examples: Chicken Nugget, Bottle Cap, United States Dollar, Bell, Simoleon.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Melee">
            <summary>
              <para>The category for everything, that is in some way related to melee weapons.
              <br/>Examples (items): Melee Durability Doubler, Bracelet of Strength, Kill Profiter, Electro Pill, Critter Upper.
              <br/>Examples (traits): Harmless, Tank-Like, Increased Crit Chance, No In-Fighting, Wall Walloper.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Guns">
            <summary>
              <para>The category for everything, that is in some way related to guns, ammo and sometimes explosives.
              <br/>Examples (items): Ammo Processor, Kill Profiter, Ammo Capacity Mod, Ammo Stealer, Bomb Maker.
              <br/>Examples (traits): Big Bullets, Blaster Survivor, Ammo Scavenger, No In-Fighting, Burning Bullets.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Social">
            <summary>
              <para>The category for everything, that is in some way related to social interaction.
              <br/>Examples (items): Necronomicon, Haterator, Drink Mixer, Cocktail, Slave Helmet Remover, Body Swapper.
              <br/>Examples (traits): Class Solidarity, Clumsiness Forgiven, Low-Cost Jobs, Disturbing Facial Expressions, Share the Health.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Stealth">
            <summary>
              <para>The category for everything, that is in some way related to stealth.
              <br/>Examples (items): Safe Buster, Haterator, EMP Grenade, Boombox, Silencer.
              <br/>Examples (traits): Backstabber, Blends In Nicely, Secret Vandalizer, Intrusion Artist, Honor Among Thieves.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Movement">
            <summary>
              <para>The category for everything, that is in some way related to movement.
              <br/>Examples (items): Quick Escape Teleporter, Sugar, Antidote.
              <br/>Examples (traits): Skinny Nerdlinger, Kneecapper, Roller Skates, Slippery Target, Bulky.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Defense">
            <summary>
              <para>The category for everything, that is in some way related to defense.
              <br/>Examples (items): Armor Durability Doubler, Quick Escape Teleporter, Mini Fridge, Kill Healthenizer, Resurrection Shampoo.
              <br/>Examples (traits): I'm Outtie, Un-Crits, Fireproof Skin, Medical Professional, Disturbing Facial Expressions.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Trade">
            <summary>
              <para>The category for everything, that is in some way related to trading.
              <br/>Examples (items): Free Item Voucher, Cube of Lampey, Portable Sell-O-Matic, Hiring Voucher.
              <br/>Examples (traits): Drug-a-lug, Shrewd Negotiator, Moocher, Shop Drops, Banana Lover.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueCategories.Negative">
            <summary>
              <para>The category for traits, that are non-beneficial to the agent that has these traits.
              <br/>Examples: Corruption Costs, Bodyguard, No Teleports, Fair Game, Sausage Fingers.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.ItemTypes">
            <summary>
              <para>The collection of item types used in the game. Use it to avoid typos.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.Food">
            <summary>
              <para>Specifies that the item is a food or a drink and can be consumed.
              <br/>Examples: Fud, Beer, Ham Sandwich, Whiskey, Banana.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.Consumable">
            <summary>
              <para>Specifies that the item can be consumed, but is not considered a food item.
              <br/>Examples: First Aid Kit, Syringe, Cocktail, Cigarettes, Cologne.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.Wearable">
            <summary>
              <para>Specifies that the item can be worn.
              <br/>Examples: Bracelet of Strength, Bulletproof Vest, Soldier Helmet, Mood Ring, Mayor Badge.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.WeaponMelee">
            <summary>
              <para>Specifies that the item is a melee weapon.
              <br/>Examples: Chloroform Hankie, Sledgehammer, Fist, Knife, Wrench.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.WeaponProjectile">
            <summary>
              <para>Specifies that the item is a projectile/ranged weapon.
              <br/>Examples: Freeze Ray, Laser Gun, Pistol, Oil Container, Fire Extinguisher.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.WeaponThrown">
            <summary>
              <para>Specifies that the item is a thrown weapon.
              <br/>Examples: Land Mine, Grenade, Toss, Molotov Cocktail, Shuriken.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.Tool">
            <summary>
              <para>Specifies that the item is something useful, that does not fall under any other type.
              <br/>Examples: Safe Cracking Tool, Necronomicon, Hypnotizer II, Kill Profiter, Cube of Lampey.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.ItemTypes.Combine">
            <summary>
              <para>Specifies that the item can be combined with other items.
              <br/>Examples: Food Processor, Armor Durability Doubler, Accuracy Mod, Identify Wand, Portable Sell-O-Matic.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueExtensions">
            <summary>
              <para>The collection of useful hook-related extension methods.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.AddItem``1(InvDatabase,System.Int32)">
            <summary>
              <para>Adds the specified <paramref name="amount"/> of the <typeparamref name="TItem"/> item to the current <paramref name="inventory"/>.</para>
            </summary>
            <typeparam name="TItem">The type of the item to add to the <paramref name="inventory"/>.</typeparam>
            <param name="inventory">The current inventory.</param>
            <param name="amount">The amount of the item to add.</param>
            <returns>The added item, if found in the inventory; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inventory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="amount"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetItem``1(InvDatabase)">
            <summary>
              <para>Finds an item hook that is assignable to a variable of <typeparamref name="TItem"/> type in the current <paramref name="inventory"/>.</para>
            </summary>
            <typeparam name="TItem">The type of the item hook to search for.</typeparam>
            <param name="inventory">The current inventory.</param>
            <returns>An item hook assignable to a variable of <typeparamref name="TItem"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inventory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetItems``1(InvDatabase)">
            <summary>
              <para>Finds all item hooks that are assignable to a variable of <typeparamref name="TItem"/> type in the current <paramref name="inventory"/>.</para>
            </summary>
            <typeparam name="TItem">The type of the item hooks to search for.</typeparam>
            <param name="inventory">The current inventory.</param>
            <returns>An enumerable collection of item hooks that are assignable to a variable of <typeparamref name="TItem"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inventory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.HasItem``1(InvDatabase)">
            <summary>
              <para>Determines whether the current <paramref name="inventory"/> contains an item hook that is assignable to a variable of <typeparamref name="TItem"/> type.</para>
            </summary>
            <typeparam name="TItem">The type of the item hook to search for.</typeparam>
            <param name="inventory">The current inventory.</param>
            <returns><see langword="true"/>, if the <paramref name="inventory"/> contains an item that has a hook that is assignable to a variable of <typeparamref name="TItem"/> type; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inventory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.HasItem``1(InvDatabase,System.Int32)">
            <summary>
              <para>Determines whether the sum of item counts of the items, that have hooks that are assignable to a variable of <typeparamref name="TItem"/> type, is larger than or equal to the specified <paramref name="amount"/>.</para>
            </summary>
            <typeparam name="TItem">The type of the item hooks to search for.</typeparam>
            <param name="inventory">The current inventory.</param>
            <param name="amount">The required amount of items.</param>
            <returns><see langword="true"/>, if the sum of item counts of the found items is larger than or equal to the specified <paramref name="amount"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inventory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GiveAbility``1(Agent)">
            <summary>
              <para>Gives the specified <typeparamref name="TAbility"/> ability to the current <paramref name="agent"/>.</para>
            </summary>
            <typeparam name="TAbility">The ability type to give to the <paramref name="agent"/>.</typeparam>
            <param name="agent">The current agent.</param>
            <returns>The given ability.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetAbility(Agent)">
            <summary>
              <para>Returns the <see cref="T:RogueLibsCore.CustomAbility"/> hook associated with the current <paramref name="agent"/>'s special ability.</para>
            </summary>
            <param name="agent">The current agent.</param>
            <returns>The <see cref="T:RogueLibsCore.CustomAbility"/> hook associated with the <paramref name="agent"/>, if found; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetAbility``1(Agent)">
            <summary>
              <para>Finds an item hook assignable to a variable of the specified <typeparamref name="TAbility"/> type associated with the current <paramref name="agent"/>'s special ability.</para>
            </summary>
            <typeparam name="TAbility">The type of the item hook to search for.</typeparam>
            <param name="agent">The current agent.</param>
            <returns>The item hook assignable to a variable of the specified <typeparamref name="TAbility"/> type associated with the <paramref name="agent"/>'s special ability, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetState(ButtonData)">
            <summary>
              <para>Gets the current <paramref name="buttonData"/>'s state represented by the <see cref="T:RogueLibsCore.UnlockButtonState"/> enumeration.</para>
            </summary>
            <param name="buttonData">The current button.</param>
            <returns>The <see cref="T:RogueLibsCore.UnlockButtonState"/> enumeration representing the current <paramref name="buttonData"/>'s state.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttonData"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.SetState(ButtonData,RogueLibsCore.UnlockButtonState)">
            <summary>
              <para>Sets the current <paramref name="buttonData"/>'s state represented by the specified <see cref="T:RogueLibsCore.UnlockButtonState"/> <paramref name="value"/>.</para>
            </summary>
            <param name="buttonData">The current button.</param>
            <param name="value">The <see cref="T:RogueLibsCore.UnlockButtonState"/> representing the button's state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buttonData"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.AddTrait``1(Agent)">
            <summary>
              <para>Adds the specified <typeparamref name="TTrait"/> trait to the current <paramref name="agent"/>.</para>
            </summary>
            <typeparam name="TTrait">The type of the trait to add to the <paramref name="agent"/>.</typeparam>
            <param name="agent">The current agent.</param>
            <returns>The added trait, if found on the character; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetTrait``1(Agent)">
            <summary>
              <para>Finds a trait hook that is assignable to a variable of <typeparamref name="TTrait"/> type on the current <paramref name="agent"/>.</para>
            </summary>
            <typeparam name="TTrait">The type of the trait hook to search for.</typeparam>
            <param name="agent">The current agent.</param>
            <returns>A trait hook assignable to a variable of <typeparamref name="TTrait"/> type, if found; otherwise, <see langword="default"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetTraits``1(Agent)">
            <summary>
              <para>Finds all trait hooks that are assignable to a variable of <typeparamref name="TTrait"/> type on the current <paramref name="agent"/>.</para>
            </summary>
            <typeparam name="TTrait">The type of the trait hooks to search for.</typeparam>
            <param name="agent">The current agent.</param>
            <returns>An enumerable collection of trait hooks that are assignable to a variable of <typeparamref name="TTrait"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.HasTrait``1(Agent)">
            <summary>
              <para>Determines whether the current <paramref name="agent"/> has a trait with a hook that is assignable to a variable of <typeparamref name="TTrait"/> type.</para>
            </summary>
            <typeparam name="TTrait">The type of the trait hook to search for.</typeparam>
            <param name="agent">The current agent.</param>
            <returns><see langword="true"/>, if the <paramref name="agent"/> has a trait that has a hook that is assignable to a variable of <typeparamref name="TTrait"/> type; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.AddTrait(Agent,System.String)">
            <summary>
              <para>Adds a trait with the specified <paramref name="traitName"/> to the current <paramref name="agent"/>.</para>
            </summary>
            <param name="agent">The current agent.</param>
            <param name="traitName">The name of the trait to add.</param>
            <returns>The added trait, if found on the character; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.GetTrait(Agent,System.String)">
            <summary>
              <para>Finds a trait with the specified <paramref name="traitName"/> on the current <paramref name="agent"/>.</para>
            </summary>
            <param name="agent">The current agent.</param>
            <param name="traitName">The name of the trait to search for.</param>
            <returns>The trait, if found on the character; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueExtensions.HasTrait(Agent,System.String)">
            <summary>
              <para>Determines whether the current <paramref name="agent"/> has a trait with the specified <paramref name="traitName"/>.</para>
            </summary>
            <param name="agent">The current agent.</param>
            <param name="traitName">The name of the trait to search for.</param>
            <returns><see langword="true"/>, if the current <paramref name="agent"/> has a trait with the specified <paramref name="traitName"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.RogueFramework">
            <summary>
              <para>Represents the internal workings of RogueLibs.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueFramework.Plugin">
            <summary>
              <para>The RogueLibs' plugin instance.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueFramework.Debug">
            <summary>
              <para>Determines whether the RogueLibs is in Debug mode.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueFramework.DebugFlags">
            <summary>
              <para>Determines the RogueLibs' enabled debugging flags.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueFramework.IsDebugEnabled(RogueLibsCore.DebugFlags)">
            <summary>
              <para>Determines whether any of the specified <paramref name="flags"/> is enabled.</para>
            </summary>
            <param name="flags">The flags to test for.</param>
            <returns><see langword="true"/>, if any of the specified <paramref name="flags"/> is enabled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.ItemFactories">
            <summary>
              <para>The list of item hook factories, used by RogueLibs.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.TraitFactories">
            <summary>
              <para>The list of trait hook factories, used by RogueLibs.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.EffectFactories">
            <summary>
              <para>The list of effect hook factories, used by RogueLibs.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.NameProviders">
            <summary>
              <para>The list of name providers, used by RogueLibs.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.Unlocks">
            <summary>
              <para>The list of all unlocks in the game, including original ones too.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueFramework.ExtraSprites">
            <summary>
              <para>The list of extra sprites, that will be used if a sprite is not found in the appropriate collection.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.DebugFlags">
            <summary>
              <para>Represents the debugging flags.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.None">
            <summary>
              <para>No debug flags specified.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Names">
            <summary>
              <para>Specifies that names stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Unlocks">
            <summary>
              <para>Specifies that unlocks stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.UnlockMenus">
            <summary>
              <para>Specifies that unlock menus stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Sprites">
            <summary>
              <para>Specifies that sprites stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Items">
            <summary>
              <para>Specifies that items stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Traits">
            <summary>
              <para>Specifies that traits stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Effects">
            <summary>
              <para>Specifies that effects stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.Abilities">
            <summary>
              <para>Specifies that abilities stuff should be logged.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.EnableTools">
            <summary>
              <para>Specifies that various debug tools should be enabled.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.DebugFlags.All">
            <summary>
              <para>Specifies all debug flags. Expect a giant wall of constantly flowing text.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueLibs">
            <summary>
              <para>Main RogueLibs class, that is used to initialize custom content.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueLibs.GUID">
            <summary>
              <para>RogueLibs' GUID.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueLibs.Name">
            <summary>
              <para>RogueLibs' Name.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueLibs.CompiledVersion">
            <summary>
              <para>Version of RogueLibs that the current assembly is compiled with.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueLibs.CompiledSemanticVersion">
            <summary>
              <para>Semantic version of RogueLibs that the current assembly is compiled with. Don't use it in BepInPlugin.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueLibs.Version">
            <summary>
              <para>Currently installed and running version of RogueLibs.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueLibs.SemanticVersion">
            <summary>
              <para>Currently installed and running semantic version of RogueLibs.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomItem``1">
            <summary>
              <para>Creates a <typeparamref name="TItem"/> custom item. Chain "With" methods to attach extra information.</para>
            </summary>
            <typeparam name="TItem">The <see cref="T:RogueLibsCore.CustomItem"/> type. Must have a parameterless constructor.</typeparam>
            <returns>An <see cref="T:RogueLibsCore.ItemBuilder"/> with the specified item's metadata.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomAbility``1">
            <summary>
              <para>Creates a <typeparamref name="TAbility"/> custom ability. Chain "With" methods to attach extra information.</para>
            </summary>
            <typeparam name="TAbility">The <see cref="T:RogueLibsCore.CustomAbility"/> type. Must have a parameterless constructor.</typeparam>
            <returns>An <see cref="T:RogueLibsCore.AbilityBuilder"/> with the specified ability's metadata.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomTrait``1">
            <summary>
              <para>Creates a <typeparamref name="TTrait"/> custom trait. Chain "With" methods to attach extra information.</para>
            </summary>
            <typeparam name="TTrait">The <see cref="T:RogueLibsCore.CustomTrait"/> type. Must have a parameterless constructor.</typeparam>
            <returns>An <see cref="T:RogueLibsCore.TraitBuilder"/> with the specified trait's metadata.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomEffect``1">
            <summary>
              <para>Creates a <typeparamref name="TEffect"/> custom effect. Chain "With" methods to attach extra information.</para>
            </summary>
            <typeparam name="TEffect">The <see cref="T:RogueLibsCore.CustomEffect"/> type. Must have a parameterless constructor.</typeparam>
            <returns>An <see cref="T:RogueLibsCore.EffectBuilder"/> with the specified effect's metadata.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomSprite(System.String,RogueLibsCore.SpriteScope,System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with the specified <paramref name="name"/>, <paramref name="scope"/>, with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="name">The custom sprite's name.</param>
            <param name="scope">The custom sprite's scope.</param>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created <see cref="T:RogueLibsCore.RogueSprite"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomSprite(System.String,RogueLibsCore.SpriteScope,System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with the specified <paramref name="name"/>, <paramref name="scope"/>, with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="name">The custom sprite's name.</param>
            <param name="scope">The custom sprite's scope.</param>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created <see cref="T:RogueLibsCore.RogueSprite"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomAudio(System.String,System.Byte[],UnityEngine.AudioType)">
            <summary>
              <para>Creates a custom <see cref="T:UnityEngine.AudioClip"/> from <paramref name="rawData"/> using the specified audio <paramref name="format"/> and adds it to the game under the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">The custom audioclip's name.</param>
            <param name="rawData">The byte array containing a raw audio file.</param>
            <param name="format">The audio file's format.</param>
            <returns>The created <see cref="T:UnityEngine.AudioClip"/>.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occured while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">The specified <paramref name="format"/> is not supported.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomName(System.String,System.String,RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified <paramref name="name"/>, <paramref name="type"/> and localization <paramref name="info"/>.</para>
            </summary>
            <param name="name">The name of the localizable string to create.</param>
            <param name="type">The type of the localizable string to create.</param>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The created <see cref="T:RogueLibsCore.CustomName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A localizable string with the specified <paramref name="name"/> and <paramref name="type"/> already exists in the <see cref="T:RogueLibsCore.CustomNameProvider"/>'s dictionary.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomUnlock(RogueLibsCore.UnlockWrapper)">
            <summary>
              <para>Integrates the specified <paramref name="unlock"/> into the game.</para>
            </summary>
            <param name="unlock">The unlock to integrate into the game.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlock"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.CreateCustomUnlock(RogueLibsCore.UnlockWrapper,RogueLibsCore.CustomNameInfo,RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Integrates the specified <paramref name="unlock"/> into the game and creates a <paramref name="name"/> and a <paramref name="description"/> for it.</para>
            </summary>
            <param name="unlock">The unlock to integrate into the game.</param>
            <param name="name">The localization data to initialize the unlock's name with.</param>
            <param name="description">The localization data to initialize the unlock's description with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlock"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the specified <paramref name="unlock"/>'s name or description already exists in the <see cref="T:RogueLibsCore.CustomNameProvider"/> dictionary.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.GetUnlock(System.String,System.String)">
            <summary>
              <para>Gets an unlock with the specified <paramref name="name"/> and <paramref name="type"/>.</para>
            </summary>
            <param name="name">The name of the unlock to search for.</param>
            <param name="type">The type of the unlock to search for.</param>
            <returns>The unlock with the specified <paramref name="name"/> and <paramref name="type"/>, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueLibs.GetUnlock``1(System.String)">
            <summary>
              <para>Gets an unlock of the specified <typeparamref name="TUnlock"/> type and with the specified <paramref name="name"/>.</para>
            </summary>
            <typeparam name="TUnlock">The type of the unlock to search for.</typeparam>
            <param name="name">The name of the unlock to search for.</param>
            <returns>The unlock of the specified <typeparamref name="TUnlock"/> type and with the specified <paramref name="name"/>, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.ItemBuilder">
            <summary>
              <para>Repesents a <see cref="T:RogueLibsCore.CustomItem"/> builder, that attaches additional information to the item.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.#ctor(RogueLibsCore.ItemInfo)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemBuilder"/> class with the specified <paramref name="info"/>.</para>
            </summary>
            <param name="info">The item metadata to use.</param>
        </member>
        <member name="P:RogueLibsCore.ItemBuilder.Info">
            <summary>
              <para>The used item metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemBuilder.Name">
            <summary>
              <para>Gets the item's localizable name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemBuilder.Description">
            <summary>
              <para>Gets the item's localizable description.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemBuilder.Sprite">
            <summary>
              <para>Gets the item's sprite.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.ItemBuilder.Unlock">
            <summary>
              <para>Gets the item's unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithName(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the item's name.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the item's name already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithDescription(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the item's description.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the item's description already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithSprite(System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the item's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithSprite(System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the item's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithUnlock">
            <summary>
              <para>Creates a default <see cref="T:RogueLibsCore.ItemUnlock"/> for the item, that is unlocked by default.</para>
            </summary>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
        </member>
        <member name="M:RogueLibsCore.ItemBuilder.WithUnlock(RogueLibsCore.ItemUnlock)">
            <summary>
              <para>Creates the specified <paramref name="unlock"/> for the item.</para>
            </summary>
            <param name="unlock">The unlock information to initialize.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.ItemBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlock"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.AbilityBuilder">
            <summary>
              <para>Represents a <see cref="T:RogueLibsCore.CustomAbility"/> builder, that attaches additional information to the ability.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.#ctor(RogueLibsCore.ItemInfo)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.ItemBuilder"/> class with the specified <paramref name="info"/>.</para>
            </summary>
            <param name="info">The item metadata to use.</param>
        </member>
        <member name="P:RogueLibsCore.AbilityBuilder.Info">
            <summary>
              <para>The used item metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.AbilityBuilder.Name">
            <summary>
              <para>Gets the ability's localizable name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.AbilityBuilder.Description">
            <summary>
              <para>Gets the ability's localizable description.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.AbilityBuilder.Sprite">
            <summary>
              <para>Gets the ability's sprite.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.AbilityBuilder.Unlock">
            <summary>
              <para>Gets the ability's unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithName(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the ability's name.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the ability's name already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithDescription(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the ability's description.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the ability's description already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithSprite(System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the ability's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithSprite(System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the ability's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithUnlock">
            <summary>
              <para>Creates a default <see cref="T:RogueLibsCore.AbilityUnlock"/> for the ability, that is unlocked by default.</para>
            </summary>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
        </member>
        <member name="M:RogueLibsCore.AbilityBuilder.WithUnlock(RogueLibsCore.AbilityUnlock)">
            <summary>
              <para>Creates the specified <paramref name="unlock"/> for the ability.</para>
            </summary>
            <param name="unlock">The unlock information to initialize.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.AbilityBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlock"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.TraitBuilder">
            <summary>
              <para>Represents a <see cref="T:RogueLibsCore.CustomTrait"/> builder, that attaches additional information to the trait.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.#ctor(RogueLibsCore.TraitInfo)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.TraitBuilder"/> class with the specified <paramref name="info"/>.</para>
            </summary>
            <param name="info">The trait metadata to use.</param>
        </member>
        <member name="P:RogueLibsCore.TraitBuilder.Info">
            <summary>
              <para>The used trait metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitBuilder.Name">
            <summary>
              <para>Gets the trait's localizable name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitBuilder.Description">
            <summary>
              <para>Gets the trait's localizable description.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitBuilder.Sprite">
            <summary>
              <para>Gets the trait's sprite.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.TraitBuilder.Unlock">
            <summary>
              <para>Gets the trait's unlock.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithName(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the trait's name.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the trait's name already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithDescription(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the trait's description.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the trait's description already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithSprite(System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the trait's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithSprite(System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the trait's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithUnlock">
            <summary>
              <para>Creates a default <see cref="T:RogueLibsCore.TraitUnlock"/> for the trait, that is unlocked by default.</para>
            </summary>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
        </member>
        <member name="M:RogueLibsCore.TraitBuilder.WithUnlock(RogueLibsCore.TraitUnlock)">
            <summary>
              <para>Creates the specified <paramref name="unlock"/> for the trait.</para>
            </summary>
            <param name="unlock">The unlock information to initialize.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.TraitBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="unlock"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.EffectBuilder">
            <summary>
              <para>Represents a <see cref="T:RogueLibsCore.CustomEffect"/> builder, that attaches additional information to the effect.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.EffectBuilder.#ctor(RogueLibsCore.EffectInfo)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.EffectBuilder"/> class with the specified <paramref name="info"/>.</para>
            </summary>
            <param name="info">The effect metadata to use.</param>
        </member>
        <member name="P:RogueLibsCore.EffectBuilder.Info">
            <summary>
              <para>The used effect metadata.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectBuilder.Name">
            <summary>
              <para>Gets the effect's localizable name.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectBuilder.Description">
            <summary>
              <para>Gets the effect's localizable description.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.EffectBuilder.Sprite">
            <summary>
              <para>Gets the effect's sprite.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.EffectBuilder.WithName(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the effect's name.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.EffectBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the effect's name already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.EffectBuilder.WithDescription(RogueLibsCore.CustomNameInfo)">
            <summary>
              <para>Creates a localizable string with the specified localization <paramref name="info"/> to act as the effect's description.</para>
            </summary>
            <param name="info">The localization data to initialize the localizable string with.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.EffectBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentException">A localizable string that acts as the effect's description already exists.</exception>
        </member>
        <member name="M:RogueLibsCore.EffectBuilder.WithSprite(System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the effect's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.EffectBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.EffectBuilder.WithSprite(System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:RogueLibsCore.RogueSprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/> to act as the effect's sprite.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The current instance of <see cref="T:RogueLibsCore.EffectBuilder"/>, for chaining purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="T:RogueLibsCore.RoguePatcher">
            <summary>
              <para>Represents a simplified Harmony patcher.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.#ctor(BepInEx.BaseUnityPlugin)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.RoguePatcher"/> class with the specified <paramref name="callerPlugin"/>.</para>
            </summary>
            <param name="callerPlugin">The instance of <see cref="T:BepInEx.BaseUnityPlugin"/> responsible for the patches.</param>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.#ctor(BepInEx.BaseUnityPlugin,System.Type)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.RoguePatcher"/> class with the specified <paramref name="callerPlugin"/>.</para>
            </summary>
            <param name="callerPlugin">The instance of <see cref="T:BepInEx.BaseUnityPlugin"/> responsible for the patches.</param>
            <param name="typeWithPatches">The type containing patch methods.</param>
        </member>
        <member name="P:RogueLibsCore.RoguePatcher.TypeWithPatches">
            <summary>
              <para>Gets or sets the type containing the patch methods.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RoguePatcher.EnableStopwatch">
            <summary>
              <para>Gets or sets whether the patcher should record the patches.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RoguePatcher.Results">
            <summary>
              <para>Gets a read-only collection of the recorded patches.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.ClearResults">
            <summary>
              <para>Clears the recorded patches.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.LogResults">
            <summary>
              <para>Logs the recorded patches.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.LogResults(System.Int32)">
            <summary>
              <para>Logs the recorded patches, that took more than the specified <paramref name="threshold"/> of milliseconds to complete.</para>
            </summary>
            <param name="threshold">The threshold, in milliseconds.</param>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.SortResults">
            <summary>
              <para>Sorts the recorded patches by their time in descending order.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.AnyErrors">
            <summary>
              <para>Determines whether any of the previous patches failed and resets the value.</para>
            </summary>
            <returns><see langword="true"/>, if any of the previous patches failed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Prefix(System.Type,System.String,System.Type[])">
            <summary>
              <para>Prefix-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with a patch method called "&lt;<paramref name="targetType"/>&gt;_&lt;<paramref name="targetMethod"/>&gt;".</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Prefix(System.Type,System.String,System.String,System.Type[])">
            <summary>
              <para>Prefix-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with the specified <paramref name="patchMethod"/>.</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="patchMethod">The patch method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Postfix(System.Type,System.String,System.Type[])">
            <summary>
              <para>Postfix-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with a patch method called "&lt;<paramref name="targetType"/>&gt;_&lt;<paramref name="targetMethod"/>&gt;".</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Postfix(System.Type,System.String,System.String,System.Type[])">
            <summary>
              <para>Postfix-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with the specified <paramref name="patchMethod"/>.</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="patchMethod">The patch method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Transpiler(System.Type,System.String,System.Type[])">
            <summary>
              <para>Transpiler-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with a patch method called "&lt;<paramref name="targetType"/>&gt;_&lt;<paramref name="targetMethod"/>&gt;".</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Transpiler(System.Type,System.String,System.String,System.Type[])">
            <summary>
              <para>Transpiler-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with the specified <paramref name="patchMethod"/>.</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="patchMethod">The patch method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Finalizer(System.Type,System.String,System.Type[])">
            <summary>
              <para>Finalizer-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with a patch method called "&lt;<paramref name="targetType"/>&gt;_&lt;<paramref name="targetMethod"/>&gt;".</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RoguePatcher.Finalizer(System.Type,System.String,System.String,System.Type[])">
            <summary>
              <para>Finalizer-patches the specified <paramref name="targetType"/>'s <paramref name="targetMethod"/>, optionally with the specified <paramref name="targetParameterTypes"/>, with the specified <paramref name="patchMethod"/>.</para>
            </summary>
            <param name="targetType">The target method's type.</param>
            <param name="targetMethod">The target method's name.</param>
            <param name="patchMethod">The patch method's name.</param>
            <param name="targetParameterTypes">The target method's parameter types.</param>
            <returns><see langword="true"/>, if the patching was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:RogueLibsCore.PatchRecord">
            <summary>
              <para>Represents a recorded patch information.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.PatchRecord.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.TimeSpan,System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:RogueLibsCore.PatchRecord"/> class with the specified <paramref name="patchType"/>, <paramref name="target"/> method, <paramref name="patch"/> method, <paramref name="elapsed"/> time and <paramref name="success"/> indicating whether it succeeded or failed.</para>
            </summary>
            <param name="patchType">The Harmony patch type.</param>
            <param name="target">The target method.</param>
            <param name="patch">The patch method.</param>
            <param name="elapsed">The elapsed time.</param>
            <param name="success">Determines whether the patch succeeded or failed.</param>
        </member>
        <member name="P:RogueLibsCore.PatchRecord.PatchType">
            <summary>
              <para>Gets the Harmony patch type.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.PatchRecord.Target">
            <summary>
              <para>Gets the target method.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.PatchRecord.Patch">
            <summary>
              <para>Gets the patch method.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.PatchRecord.Elapsed">
            <summary>
              <para>Gets the elapsed time.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.PatchRecord.Success">
            <summary>
              <para>Determines whether the patch succeeded or failed.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueSprite">
            <summary>
              <para>Represents a custom sprite.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Texture">
            <summary>
              <para>Gets or sets the sprite's texture.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">The sprite is defined and <see langword="value"/> is <see langword="null"/>. Only thrown when setting the property value.</exception>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.PixelsPerUnit">
            <summary>
              <para>Gets or sets the pixels-per-unit of the sprite.</para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The sprite is defined and <see langword="value"/> is <see langword="null"/>. Only thrown when setting the property value.</exception>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Name">
            <summary>
              <para>Gets or sets the sprite's name.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">The sprite is defined and <see langword="value"/> is <see langword="null"/>. Only thrown when setting the property value.</exception>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Scope">
            <summary>
              <para>Gets or sets the sprite's scope.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Region">
            <summary>
              <para>Gets or sets the region of the texture for the sprite to use. Use <see langword="null"/> to use the entire texture.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Definitions">
            <summary>
              <para>Gets the collection of integrated <see cref="T:RogueLibsCore.RogueSprite.CustomTk2dDefinition"/>s, or <see langword="null"/> if the sprite is not defined.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.IsDefined">
            <summary>
              <para>Gets or sets whether the sprite is defined and integrated into the game.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:RogueLibsCore.RogueSprite.Name"/> or <see cref="P:RogueLibsCore.RogueSprite.Texture"/> is <see langword="null"/>, or <see cref="P:RogueLibsCore.RogueSprite.PixelsPerUnit"/> is less than or equal to 0. Only thrown when setting the property value.</exception>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.Sprite">
            <summary>
              <para>Gets the created sprite, or <see langword="null"/> if invalid data was provided.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueSprite.Define">
            <summary>
              <para>Defines the current sprite and integrates it into the game.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:RogueLibsCore.RogueSprite.Name"/> or <see cref="P:RogueLibsCore.RogueSprite.Texture"/> is <see langword="null"/>, or <see cref="P:RogueLibsCore.RogueSprite.PixelsPerUnit"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueSprite.Undefine">
            <summary>
              <para>Undefines the current sprite and disintegrates it from the game.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueSprite.CreateDefinition(UnityEngine.Texture2D,System.Nullable{UnityEngine.Rect},System.Single)">
            <summary>
              <para>Creates a <see cref="T:tk2dSpriteDefinition"/> from the specified <paramref name="texture"/> using the specified <paramref name="region"/> and <paramref name="scale"/>.</para>
            </summary>
            <param name="texture">The texture to create a <see cref="T:tk2dSpriteDefinition"/> with.</param>
            <param name="region">The region of the texture to use. Use <see langword="null"/> to use the entire texture.</param>
            <param name="scale">The scale to create a <see cref="T:tk2dSpriteDefinition"/> with.</param>
            <returns>The created <see cref="T:tk2dSpriteDefinition"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="scale"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueSprite.AddDefinition(tk2dSpriteCollectionData,tk2dSpriteDefinition)">
            <summary>
              <para>Adds the specified <paramref name="definition"/> to the <paramref name="collection"/>.</para>
            </summary>
            <param name="collection">The collection to add the specified <paramref name="definition"/> to.</param>
            <param name="definition">The definition to add to the specified <paramref name="collection"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="definition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueSprite.RemoveDefinition(tk2dSpriteCollectionData,tk2dSpriteDefinition)">
            <summary>
              <para>Removes the specified <paramref name="definition"/> from the <paramref name="collection"/>.</para>
            </summary>
            <param name="collection">The collection to remove the specified <paramref name="definition"/> from.</param>
            <param name="definition">The definition to remove from the specified <paramref name="collection"/>.</param>
            <returns><see langword="true"/>, if the definition was removed successfully; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="definition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:RogueLibsCore.RogueSprite.CustomTk2dDefinition">
            <summary>
              <para>Represents a custom <see cref="T:tk2dSpriteDefinition"/>.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.CustomTk2dDefinition.Collection">
            <summary>
              <para>Gets the collection that the sprite is defined in.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.CustomTk2dDefinition.Definition">
            <summary>
              <para>Gets the created definition.</para>
            </summary>
        </member>
        <member name="P:RogueLibsCore.RogueSprite.CustomTk2dDefinition.Scope">
            <summary>
              <para>Gets the scope of the sprite's definition.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.SpriteScope">
            <summary>
              <para>Represents a type of game resources that a <see cref="T:RogueLibsCore.RogueSprite"/> will be integrated into.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.SpriteScope.Extra">
            <summary>
              <para>The RogueLibs extra sprites. Will be used if a sprite is not found in an appropriate collection.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.SpriteScope.None">
            <summary>
              <para>Don't define the sprite anywhere.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.SpriteScope.Items">
            <summary>
              <para>The item sprites.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.SpriteScope.Objects">
            <summary>
              <para>The object sprites.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.SpriteScope.Floors">
            <summary>
              <para>The floor sprites.</para>
            </summary>
        </member>
        <member name="T:RogueLibsCore.RogueUtilities">
            <summary>
              <para>Various utility methods and fields.</para>
            </summary>
        </member>
        <member name="F:RogueLibsCore.RogueUtilities.Empty">
            <summary>
              <para>The empty read-only string collection.</para>
            </summary>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.MakeTextureReadable(UnityEngine.Texture2D)">
            <summary>
              <para>Creates a readable copy of the specified <paramref name="texture"/>.</para>
            </summary>
            <param name="texture">The texture to create a readable copy of.</param>
            <returns>The readable copy of the specified <paramref name="texture"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToSprite(System.Byte[],System.Single)">
            <summary>
              <para>Creates a <see cref="T:UnityEngine.Sprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created sprite.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToSprite(System.Byte[],UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:UnityEngine.Sprite"/> with a texture from <paramref name="rawData"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="rawData">The byte array containing a raw PNG- or JPEG-encoded image.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created sprite.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToSprite(System.String,System.Single)">
            <summary>
              <para>Creates a <see cref="T:UnityEngine.Sprite"/> with a texture created from a file at the specified <paramref name="filePath"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="filePath">The path to the PNG- or JPEG-encoded image file.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created sprite.</returns>
            <exception cref="T:System.IO.FileNotFoundException">A file at the specified <paramref name="filePath"/> does not exist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToSprite(System.String,UnityEngine.Rect,System.Single)">
            <summary>
              <para>Creates a <see cref="T:UnityEngine.Sprite"/> with a texture created from a file at the specified <paramref name="filePath"/> with the specified <paramref name="ppu"/>.</para>
            </summary>
            <param name="filePath">The path to the PNG- or JPEG-encoded image file.</param>
            <param name="region">The region of the texture for the sprite to use.</param>
            <param name="ppu">The pixels-per-unit of the custom sprite's texture.</param>
            <returns>The created sprite.</returns>
            <exception cref="T:System.IO.FileNotFoundException">A file at the specified <paramref name="filePath"/> does not exist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ppu"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToAudioClip(System.String)">
            <summary>
              <para>Converts an audio file from the specified <paramref name="filePath"/> into an <see cref="T:UnityEngine.AudioClip"/>. Detects the audio format by the file's extension.</para>
              <para>Supported audio formats: MP3 (.mp3), WAV (.wav, .wave) and Ogg (.ogg, .spx, .opus, .og_).</para>
            </summary>
            <param name="filePath">Path to the MP3-, WAV- or Ogg-encoded audio file.</param>
            <returns>Created <see cref="T:UnityEngine.AudioClip"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is an empty string or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="filePath"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="filePath"/> is invalid.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="filePath"/> specifies a directory or the caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">File specified in <paramref name="filePath"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in invalid format or the extension's format is not supported.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToAudioClip(System.Byte[],UnityEngine.AudioType)">
            <summary>
              <para>Converts the specified <paramref name="rawData"/> into an <see cref="T:UnityEngine.AudioClip"/> using the specified audio <paramref name="format"/>.</para>
              <para>Supported audio formats: MP3 (.mp3), WAV (.wav, .wave) and Ogg (.ogg, .spx, .opus, .og_).</para>
            </summary>
            <param name="rawData">MP3-, WAV- or Ogg-encoded audio data.</param>
            <param name="format">Format of the audio file.</param>
            <returns>Created <see cref="T:UnityEngine.AudioClip"/>.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occured while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">The specified <paramref name="format"/> is not supported.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.ConvertToAudioClip(System.String,UnityEngine.AudioType)">
            <summary>
              <para>Converts an audio file from the specified <paramref name="filePath"/> into an <see cref="T:UnityEngine.AudioClip"/> using the specified audio <paramref name="format"/>.</para>
              <para>Supported audio formats: MP3 (.mp3), WAV (.wav, .wave) and Ogg (.ogg, .spx, .opus, .og_).</para>
            </summary>
            <param name="filePath">Path to the MP3-, WAV- or Ogg-encoded audio file.</param>
            <param name="format">Format of the audio file.</param>
            <returns>Created <see cref="T:UnityEngine.AudioClip"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> is an empty string or contains one or more invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="filePath"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="filePath"/> is invalid.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="filePath"/> specifies a directory or the caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">File specified in <paramref name="filePath"/> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in invalid format or the specified <paramref name="format"/> is not supported.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.GetInterfaceMethod(System.Type,System.Type,System.String)">
            <summary>
              <para>Returns the <paramref name="interfaceType"/>'s <paramref name="methodName"/> implemented by the specified <paramref name="type"/>.</para>
            </summary>
            <param name="type">The type implementing the specified <paramref name="interfaceType"/>.</param>
            <param name="interfaceType">The type of the interface with the method.</param>
            <param name="methodName">The name of the interface's method.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> of the implemented method, if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:RogueLibsCore.RogueUtilities.GetInterfaceMethods(System.Type,System.Type,System.String[])">
            <summary>
              <para>Returns the <paramref name="interfaceType"/> <paramref name="methodNames"/>, implemented by the specified <paramref name="type"/>.</para>
            </summary>
            <param name="type">The type implementing the specified <paramref name="interfaceType"/>.</param>
            <param name="interfaceType">The type of the interface with the methods.</param>
            <param name="methodNames">The names of the interface's method.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/>s of the implemented methods, if found; otherwise, <see langword="null"/>.</returns>
        </member>
    </members>
</doc>
